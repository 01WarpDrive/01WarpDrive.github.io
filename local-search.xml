<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>人工智能安全技术笔记（1）概论</title>
    <link href="/posts/30b1.html"/>
    <url>/posts/30b1.html</url>
    
    <content type="html"><![CDATA[<h1 id="人工智能安全技术笔记（1）概论"><a href="#人工智能安全技术笔记（1）概论" class="headerlink" title="人工智能安全技术笔记（1）概论"></a>人工智能安全技术笔记（1）概论</h1><p>本文及其系列文章是笔者基于上海交通大学《人工智能安全技术》课程内容整理并拓展，未经允许禁止转载。</p><h2 id="人工智能与网络安全融合"><a href="#人工智能与网络安全融合" class="headerlink" title="人工智能与网络安全融合"></a>人工智能与网络安全融合</h2><h3 id="AI威胁"><a href="#AI威胁" class="headerlink" title="AI威胁"></a>AI威胁</h3><ul><li><p>恶意软件逃逸</p><p>构建生成对抗网络（generaTIve adversarial network， GAN），算法来生成对抗恶意软件样本。</p><blockquote><p>2017年，第一个公开使用机器学习创建恶意软件的例子在论文《Generating Adversarial Malware Examples for Black-Box Attacks Based on GAN》中被提出。恶意软件作者通常无法访问到恶意软件检测系统所使用机器学习模型的详细结构和参数，因此他们只能执行黑盒攻击。论文揭示了如何通过构建生成对抗网络（Generating Adversarial network， GAN）算法来生成对抗恶意软件样本，这些样本能够绕过基于机器学习的黑盒检测系统。</p><p>如果网络安全企业的AI可以学习识别潜在的恶意软件，那么“黑客AI”就能够通过观察学习防恶意软件AI做出决策，使用该知识来开发“最小程度被检测出”的恶意软件。2017 DEFCON会议上，安全公司Endgame透露了如何使用Elon Musk的OpenAI框架生成定制恶意软件，且所创建的恶意软件无法被安全引擎检测发现。Endgame的研究是基于看起来有恶意的二进制文件，通过改变部分代码，改变后的代码可以躲避防病毒引擎检测。</p><p>今年3月发表的论文《Adversarial Malware Binaries： Evading Deep Learning for Malware Detection in Executables》通过研究使用深度网络从原始字节中学习恶意软件检测方法所存在的漏洞，提出了一种基于梯度的攻击：输入数据的微小变化会导致在测试时的错误分类，因此只需在每个恶意软件样本末尾更改少量特定字节，就可在保留其入侵功能的同时逃避安全检测。结果显示修改少于1%的字节，对抗恶意软件二进制就可以高概率躲避安全检测。</p></blockquote></li><li><p>深度伪造</p><p> 深度伪造是深度学习（deep learning）与伪造（fake）二者的组合词，一开始专指用基于人工智能尤其是深度学习的人像合成技术。</p></li><li><p>利用AI击败验证码</p><blockquote><p>目前，对人和机器的区分主要采用“全自动区分计算机和人类的公开图灵测试”（Completely Automated Public Turing test to tell Computers and Humans Apart，CAPTCHA），俗称验证码，以防止人们使用自动化机器人在网站上设置虚假帐户。在登录网站时，用户必须通过解决视觉难题来证明他们是人类，而这需要识别以某种方式失真或动画化的字母、数字、符号或对象。reCAPTCHA项目是由卡内基梅隆大学所发展的系统，主要目的是利用CAPTCHA技术来帮助典籍数字化的进行，这个项目将由书本扫描下来无法准确被光学文字辨识技术（OCR， Optical Character Recognition）识别的文字显示在CAPTCHA问题中，让人类在回答CAPTCHA问题时用人脑加以识别这些文字。</p><p>早在2012年，研究人员Claudia Cruz、Fernando Uceda和Leobardo Reyes就发布了一个机器学习安全攻击的例子。他们使用支持向量机（SVM）以82%的精度破解了图像运行系统reCAPTCHA，也正因此所有验证码机制都进行了针对性的安全改进，面对这些新型验证码系统研究人员则开始尝试使用深度学习技术予以破解。</p><p>Vicarious一直在开发针对概率生成模型Recursive Cortical Network（RCN）的算法，旨在通过分析图像中的像素来识别物体，以查看它们是否与物体的轮廓匹配。2013年，Vicarious宣布它已经破解了Google、Yahoo、PayPal和Captcha.com使用的基于文本的验证码测试，其准确率达到了90%。标准的reCAPTCHA测试中，软件可成功解开三分之二的验证问题。在机器人检测系统测试中，雅虎验证码的成功率为57.4%，PayPal的成功率为57.1%。</p></blockquote></li><li><p>AI社会工程学攻击</p><blockquote><p>在 2018 年 3 月曝光的“剑桥分析”事件中，商业智能公司利用脸书用户数据进行人物画像，自动推送信息以影响选民在美国大选、英国脱欧等政治事件中的投票倾向；该事件标志着数据智能从商业领域扩散至政治领域，使得单纯的网络数据安全问题上升为现实的政治安全隐患。</p></blockquote></li></ul><h2 id="人工智能模型安全"><a href="#人工智能模型安全" class="headerlink" title="人工智能模型安全"></a>人工智能模型安全</h2><h2 id="隐私泄漏"><a href="#隐私泄漏" class="headerlink" title="隐私泄漏"></a>隐私泄漏</h2><h2 id="伦理与公平"><a href="#伦理与公平" class="headerlink" title="伦理与公平"></a>伦理与公平</h2>]]></content>
    
    
    <categories>
      
      <category>网络安全</category>
      
    </categories>
    
    
    <tags>
      
      <tag>网络安全</tag>
      
      <tag>课程学习</tag>
      
      <tag>AI</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>leetcode 刷题记录</title>
    <link href="/posts/c862.html"/>
    <url>/posts/c862.html</url>
    
    <content type="html"><![CDATA[<h1 id="leetcode-刷题记录"><a href="#leetcode-刷题记录" class="headerlink" title="leetcode 刷题记录"></a>leetcode 刷题记录</h1><h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><ul><li><p>刷题顺序参考<a href="https://books.halfrost.com/leetcode/">序 | LeetCode Cookbook (halfrost.com)</a></p></li><li><p>所有思路分析中的公式、操作都是按照 C++ 语法表示的。</p></li><li><p>「分析」部分大多是参考了官方题解后自己整理的，想借此锻炼自己的表达能力。</p></li><li><p><strong>本文章更多是记录个人的刷题情况，其中的题解分析往往是事先参考了官网相关题解，语言表述和技术细节多有不如，不推荐作为您的主要刷题参考。</strong></p></li></ul><h1 id="Array"><a href="#Array" class="headerlink" title="Array"></a>Array</h1><h2 id="4-寻找两个正序数组的中位数"><a href="#4-寻找两个正序数组的中位数" class="headerlink" title="4 寻找两个正序数组的中位数"></a>4 <a href="https://leetcode.cn/problems/median-of-two-sorted-arrays/">寻找两个正序数组的中位数</a></h2><blockquote><p>给定两个大小分别为 m 和 n 的正序（从小到大）数组 nums1 和 nums2。请你找出并返回这两个正序数组的中位数 。算法的时间复杂度应该为 O(log (m+n)) 。链接：https://leetcode.cn/problems/median-of-two-sorted-arrays</p></blockquote><h3 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h3><p>要求对数时间复杂度，联想到二分查找。二分查找在有序数组中查找指定的数，每次迭代中可以通过大小比较排除一半的数据。本题要在两个数组中找中位数，是否可以通过选定 pivots ，在一次迭代中排除掉一定比例的数据？</p><p>我们注意到，中位数问题是第 k 小问题的一个特例：</p><ul><li>一个偶数数组的中位数为它第$len/2$小的元素和$len/2 + 1$的元素的均值</li><li>一个奇数数组的中位数为它第$len/2 + 1$ 的元素</li></ul><p>显然，第一次迭代并排除部分数据后，我们的问题就变成了找第 $k$ 小的数。因此，pivots 的选取和 $k$ 有关。</p><ul><li>取<code>pivot1 = nums1[k/2-1]</code> 和 <code>pivot2 = nums2[k/2-1] </code>进行比较</li><li>取 <code>pivot = min(pivot1, pivot2)</code>，两个数组中小于等于 pivot 的元素共计不会超过 $(k/2-1) + (k/2-1) &lt;= k-2$ 个</li><li>pivot 所在数组的 pivot 前部分元素可以排除掉</li><li>修改两个数组（通过更改起始下标），修改 k，重复以上步骤，直到 k=1</li></ul><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-type">double</span> <span class="hljs-title">findMedianSortedArrays</span><span class="hljs-params">(vector&lt;<span class="hljs-type">int</span>&gt;&amp; nums1, vector&lt;<span class="hljs-type">int</span>&gt;&amp; nums2)</span> </span>&#123;<br>        <span class="hljs-type">int</span> len = nums1.<span class="hljs-built_in">size</span>() + nums2.<span class="hljs-built_in">size</span>();<br>        <span class="hljs-keyword">if</span> (len % <span class="hljs-number">2</span> != <span class="hljs-number">0</span>) <span class="hljs-keyword">return</span> <span class="hljs-built_in">findKthNum</span>(nums1, nums2, len / <span class="hljs-number">2</span> + <span class="hljs-number">1</span>);<br>        <span class="hljs-keyword">else</span> <span class="hljs-built_in">return</span> (<span class="hljs-built_in">findKthNum</span>(nums1, nums2, len / <span class="hljs-number">2</span>) + <span class="hljs-built_in">findKthNum</span>(nums1, nums2, len / <span class="hljs-number">2</span> + <span class="hljs-number">1</span>)) / <span class="hljs-number">2.0</span>;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-type">double</span> <span class="hljs-title">findKthNum</span><span class="hljs-params">(vector&lt;<span class="hljs-type">int</span>&gt;&amp; nums1, vector&lt;<span class="hljs-type">int</span>&gt;&amp; nums2, <span class="hljs-type">int</span> k)</span> </span>&#123;<br>        <span class="hljs-type">int</span> index1, index2, pivot1, pivot2;<br>        <span class="hljs-type">int</span> left1 = <span class="hljs-number">0</span>;<br>        <span class="hljs-type">int</span> left2 = <span class="hljs-number">0</span>;<br>        <span class="hljs-type">int</span> m = nums1.<span class="hljs-built_in">size</span>();<br>        <span class="hljs-type">int</span> n = nums2.<span class="hljs-built_in">size</span>();<br>        <span class="hljs-keyword">while</span> (<span class="hljs-literal">true</span>) &#123;<br>            <span class="hljs-keyword">if</span> (left1 == m) <span class="hljs-keyword">return</span> nums2[left2 + k - <span class="hljs-number">1</span>];<br>            <span class="hljs-keyword">if</span> (left2 == n) <span class="hljs-keyword">return</span> nums1[left1 + k - <span class="hljs-number">1</span>];<br>            <span class="hljs-keyword">if</span> (k == <span class="hljs-number">1</span>) <span class="hljs-keyword">return</span> std::<span class="hljs-built_in">min</span>(nums1[left1], nums2[left2]);<br>            index1 = std::<span class="hljs-built_in">min</span>(left1 + k / <span class="hljs-number">2</span> - <span class="hljs-number">1</span>, m - <span class="hljs-number">1</span>);<br>            index2 = std::<span class="hljs-built_in">min</span>(left2 + k / <span class="hljs-number">2</span> - <span class="hljs-number">1</span>, n - <span class="hljs-number">1</span>);<br>            <span class="hljs-keyword">if</span> (nums1[index1] &lt; nums2[index2]) &#123;<br>                k -= index1 - left1 + <span class="hljs-number">1</span>;<br>                left1 = index1 + <span class="hljs-number">1</span>;<br>            &#125;<br>            <span class="hljs-keyword">else</span> &#123;<br>                k -= index2 - left2 + <span class="hljs-number">1</span>;<br>                left2 = index2 + <span class="hljs-number">1</span>;<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><h3 id="心得"><a href="#心得" class="headerlink" title="心得"></a>心得</h3><ul><li>写 while 循环先确定退出条件</li><li>数组选取 pivot 时确保不会越界</li><li>将要用的数据先确定类型，如 <code>int m = nums1.size()</code>，在 leetcode 中，<code>min(left1 + k / 2 - 1, nums1.size() - 1)</code> 会由于<code>nums1.size()</code> 类型不是 <code>int</code> 的原因而无法调用</li></ul><h2 id="11-盛最多水的容器"><a href="#11-盛最多水的容器" class="headerlink" title="11 盛最多水的容器"></a>11 <a href="https://leetcode.cn/problems/container-with-most-water/">盛最多水的容器</a></h2><p>难度中等</p><p>4360</p><blockquote><p>给定一个长度为 n 的整数数组 height 。有 n 条垂线，第 i 条线的两个端点是 (i, 0) 和 (i, height[i]) 。</p><p>找出其中的两条线，使得它们与 x 轴共同构成的容器可以容纳最多的水。</p><p>返回容器可以储存的最大水量。</p><p>说明：你不能倾斜容器。链接：https://leetcode.cn/problems/container-with-most-water</p></blockquote><h3 id="分析-1"><a href="#分析-1" class="headerlink" title="分析"></a>分析</h3><p>数组类型的数据结构，首先想到的便是遍历。其中，双指针遍历（滑动窗口）是很常见的思路。笔者认为滑动窗口的思考方法，优先考虑从大窗口变成小窗口。</p><p>本题中，笔者用两个指针$i$,$j$表示窗口边界。当向中间移动两个指针时，宽度减小。要想获得更大的容量，就得找到更大的高度。由于高度取决于两个指针中的“短板”， 因此，只有当内移短板指针时，才需要判断并更新当前的最大容量。</p><h4 id="正确性"><a href="#正确性" class="headerlink" title="正确性"></a>正确性</h4><p>将所有双指针组合视作$C(n,2)$个状态，则每次更新容量，都会剔除部分「不大于」当前最大容量的状态。因此，当最终只剩下一个状态时，必定不小于所有已经剔除的状态。</p><h3 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">maxArea</span><span class="hljs-params">(vector&lt;<span class="hljs-type">int</span>&gt;&amp; height)</span> </span>&#123;<br>        <span class="hljs-type">int</span> i = <span class="hljs-number">0</span>, j = height.<span class="hljs-built_in">size</span>() - <span class="hljs-number">1</span>, capacity = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">while</span> (i &lt; j) &#123;<br>            capacity = height[i] &lt; height[j] ?<br>                        <span class="hljs-built_in">max</span>(capacity, (j - i) * height[i++]): <span class="hljs-comment">// 注意 j-i 在 i++ 前</span><br>                        <span class="hljs-built_in">max</span>(capacity, (j - i) * height[j--]);<br>        &#125;<br>        <span class="hljs-keyword">return</span> capacity;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><h3 id="心得-1"><a href="#心得-1" class="headerlink" title="心得"></a>心得</h3><ul><li>一种思路：遍历——双指针遍历（滑动窗口）</li><li>本次的代码看起来有点炫技。笔者认为将代码写得通俗易懂和佶屈聱牙是两种不同的境界，前者适合一个优秀理想的开发团队，后者则是身处不稳定的职位时提高自身不可替代性的一种手段。实际上本次的代码只是个小细节，真正的佶屈聱牙应当是优秀特异的算法思路和先进高效的代码技术。</li></ul><h2 id="15-三数之和"><a href="#15-三数之和" class="headerlink" title="15. 三数之和"></a><a href="https://leetcode.cn/problems/3sum/">15. 三数之和</a></h2><blockquote><p>给你一个整数数组 nums ，判断是否存在三元组 [nums[i], nums[j], nums[k]] 满足 i != j、i != k 且 j != k ，同时还满足 nums[i] + nums[j] + nums[k] == 0 。请</p><p>你返回所有和为 0 且不重复的三元组。</p><p>注意：答案中不可以包含重复的三元组。</p></blockquote><h3 id="分析-2"><a href="#分析-2" class="headerlink" title="分析"></a>分析</h3><p>暴力遍历需要$O(n^3)$，因为涉及到大小比较，考虑对数组排序。</p><p>由于返回的三元组不允许重复，因此分析时可以把重复元素排除。假定$i&lt;j&lt;k$，第一层遍历选定数字 $num[i]$ ，则问题转变为在有序数组中寻找两数之和。显然，对于 $i$ 后面的子数组，通过维持两个指针 $j,k$ ，不断右移、左移两个指针即可在 $O(n)$ 时间内找到所有合适的 $j,k$。</p><p>过程中需要添加判断语句排除重复元素。</p><h3 id="代码-2"><a href="#代码-2" class="headerlink" title="代码"></a>代码</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    vector&lt;vector&lt;<span class="hljs-type">int</span>&gt;&gt; <span class="hljs-built_in">threeSum</span>(vector&lt;<span class="hljs-type">int</span>&gt;&amp; nums) &#123;<br>        vector&lt;vector&lt;<span class="hljs-type">int</span>&gt;&gt; ans = &#123;&#125;;<br>        <span class="hljs-type">int</span> tmp;<br>        <span class="hljs-keyword">if</span> (nums.<span class="hljs-built_in">size</span>() &lt; <span class="hljs-number">3</span>) <span class="hljs-keyword">return</span> ans;<br>        <span class="hljs-built_in">sort</span>(nums.<span class="hljs-built_in">begin</span>(), nums.<span class="hljs-built_in">end</span>());<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; nums.<span class="hljs-built_in">size</span>() - <span class="hljs-number">2</span>; i++) &#123;<br>            <span class="hljs-keyword">if</span> (nums[i] &gt; <span class="hljs-number">0</span>) <span class="hljs-keyword">break</span>;<br>            <span class="hljs-keyword">if</span> (i &gt; <span class="hljs-number">0</span> &amp;&amp; nums[i] == nums[i - <span class="hljs-number">1</span>]) <span class="hljs-keyword">continue</span>;<br>            <span class="hljs-type">int</span> j = i + <span class="hljs-number">1</span>, k =  nums.<span class="hljs-built_in">size</span>() - <span class="hljs-number">1</span>;<br>            <span class="hljs-keyword">while</span>(j &lt; k) &#123;<br>                <span class="hljs-keyword">if</span> (j &gt; i + <span class="hljs-number">1</span> &amp;&amp; nums[j] == nums[j - <span class="hljs-number">1</span>]) &#123;<br>                    j++;<br>                    <span class="hljs-keyword">continue</span>;<br>                &#125;<br>                tmp = nums[i] + nums[j] + nums[k];<br>                <span class="hljs-keyword">if</span> (tmp &gt; <span class="hljs-number">0</span>) &#123;<br>                    k--;<br>                &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (tmp == <span class="hljs-number">0</span>) &#123;<br>                    ans.<span class="hljs-built_in">push_back</span>(&#123;nums[i], nums[j++], nums[k--]&#125;);<br>                &#125; <span class="hljs-keyword">else</span> &#123;<br>                    j++;<br>                &#125;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> ans;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><h3 id="心得-2"><a href="#心得-2" class="headerlink" title="心得"></a>心得</h3><ul><li>涉及元素比较的数组题，可以考虑先排序数组</li></ul><h2 id="16-最接近的三数之和"><a href="#16-最接近的三数之和" class="headerlink" title="16. 最接近的三数之和"></a><a href="https://leetcode.cn/problems/3sum-closest/">16. 最接近的三数之和</a></h2><blockquote><p>给你一个长度为 n 的整数数组 nums 和 一个目标值 target。请你从 nums 中选出三个整数，使它们的和与 target 最接近。</p><p>返回这三个数的和。</p><p>假定每组输入只存在恰好一个解。</p></blockquote><h3 id="分析-3"><a href="#分析-3" class="headerlink" title="分析"></a>分析</h3><p>本题是「15. 三数之和」的变种。在三数之和中，需要列举和为0的三元组，算法需要将三元组的和与0对比。套用到本题上，则是将三元组的和与 target 对比。</p><p>依旧通过在升序数组上的双指针实现。从「11. 盛最多水的容器」开始的三题就是不断应用这种滑动窗口的思路，其本质在本题的官方题解中给出了很精炼的阐述：</p><blockquote><p>每一次枚举的过程中，我们尝试边界上的两个元素，根据它们与 target 的值的关系，选择「抛弃」左边界的元素还是右边界的元素，从而减少了枚举的范围。链接：https://leetcode.cn/problems/3sum-closest/solution/zui-jie-jin-de-san-shu-zhi-he-by-leetcode-solution/</p></blockquote><h3 id="代码-3"><a href="#代码-3" class="headerlink" title="代码"></a>代码</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">threeSumClosest</span><span class="hljs-params">(vector&lt;<span class="hljs-type">int</span>&gt;&amp; nums, <span class="hljs-type">int</span> target)</span> </span>&#123;<br>        <span class="hljs-type">int</span> ans;<br>        <span class="hljs-type">int</span> dist = <span class="hljs-number">0x3f3f3f3f</span>;<br>        <span class="hljs-type">int</span> tmp;<br>        <span class="hljs-built_in">sort</span>(nums.<span class="hljs-built_in">begin</span>(), nums.<span class="hljs-built_in">end</span>());<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; nums.<span class="hljs-built_in">size</span>() - <span class="hljs-number">2</span>; i++) &#123;<br>            <span class="hljs-keyword">if</span> (i &gt; <span class="hljs-number">0</span> &amp;&amp; nums[i] == nums[i - <span class="hljs-number">1</span>]) <span class="hljs-keyword">continue</span>;<br>            <span class="hljs-type">int</span> j = i + <span class="hljs-number">1</span>, k =  nums.<span class="hljs-built_in">size</span>() - <span class="hljs-number">1</span>;<br>            <span class="hljs-keyword">while</span>(j &lt; k) &#123;<br>                <span class="hljs-keyword">if</span> (j &gt; i + <span class="hljs-number">1</span> &amp;&amp; nums[j] == nums[j - <span class="hljs-number">1</span>]) &#123;<br>                    j++;<br>                    <span class="hljs-keyword">continue</span>;<br>                &#125;<br>                tmp = nums[i] + nums[j] + nums[k];<br>                <span class="hljs-keyword">if</span> (tmp &gt; target) &#123;<br>                    <span class="hljs-keyword">if</span> (tmp - target &lt; dist) &#123;<br>                        dist = tmp - target;<br>                        ans = tmp;<br>                    &#125;<br>                    k--;<br>                &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (tmp == target) &#123;<br>                    <span class="hljs-keyword">return</span> target;<br>                &#125; <span class="hljs-keyword">else</span> &#123;<br>                    <span class="hljs-keyword">if</span> (target - tmp &lt; dist) &#123;<br>                        dist = target - tmp;<br>                        ans = tmp;<br>                    &#125;<br>                    j++;<br>                &#125;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> ans;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><h2 id="18-四数之和"><a href="#18-四数之和" class="headerlink" title="18. 四数之和"></a><a href="https://leetcode.cn/problems/4sum/">18. 四数之和</a></h2><blockquote><p>给你一个由 n 个整数组成的数组 nums ，和一个目标值 target 。请你找出并返回满足下述全部条件且不重复的四元组 [nums[a], nums[b], nums[c], nums[d]] （若两个四元组元素一一对应，则认为两个四元组重复）：</p><ul><li>0 &lt;= a, b, c, d &lt; n</li><li>a、b、c 和 d 互不相同</li><li>nums[a] + nums[b] + nums[c] + nums[d] == target</li></ul></blockquote><h3 id="分析-4"><a href="#分析-4" class="headerlink" title="分析"></a>分析</h3><p>转换为三数之和做。理论上可以通过排除一些特殊情况来减少遍历。</p><h3 id="代码-4"><a href="#代码-4" class="headerlink" title="代码"></a>代码</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    vector&lt;vector&lt;<span class="hljs-type">int</span>&gt;&gt; <span class="hljs-built_in">threeSum</span>(vector&lt;<span class="hljs-type">int</span>&gt;&amp; nums, <span class="hljs-type">int</span> target, <span class="hljs-type">int</span> st) &#123;<br>        vector&lt;vector&lt;<span class="hljs-type">int</span>&gt;&gt; ans = &#123;&#125;;<br>        <span class="hljs-keyword">if</span> (nums.<span class="hljs-built_in">size</span>() &lt; <span class="hljs-number">3</span>) <span class="hljs-keyword">return</span> ans;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = st; i &lt; nums.<span class="hljs-built_in">size</span>() - <span class="hljs-number">2</span>; i++) &#123;<br>            <span class="hljs-keyword">if</span> (i &gt; st &amp;&amp; nums[i] == nums[i - <span class="hljs-number">1</span>]) <span class="hljs-keyword">continue</span>;<br>            <span class="hljs-type">int</span> j = i + <span class="hljs-number">1</span>, k =  nums.<span class="hljs-built_in">size</span>() - <span class="hljs-number">1</span>;<br>            <span class="hljs-keyword">while</span>(j &lt; k) &#123;<br>                <span class="hljs-keyword">if</span> (j &gt; i + <span class="hljs-number">1</span> &amp;&amp; nums[j] == nums[j - <span class="hljs-number">1</span>]) &#123;<br>                    j++;<br>                    <span class="hljs-keyword">continue</span>;<br>                &#125;<br>                <span class="hljs-type">long</span> sum = (<span class="hljs-type">long</span>)nums[i] + nums[j] + nums[k];<br>                <span class="hljs-keyword">if</span> (sum &gt; target) &#123;<br>                    k--;<br>                &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (sum == target) &#123;<br>                    ans.<span class="hljs-built_in">push_back</span>(&#123;nums[st<span class="hljs-number">-1</span>], nums[i], nums[j++], nums[k--]&#125;);<br>                &#125; <span class="hljs-keyword">else</span> &#123;<br>                    j++;<br>                &#125;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> ans;<br>    &#125;<br>    vector&lt;vector&lt;<span class="hljs-type">int</span>&gt;&gt; <span class="hljs-built_in">fourSum</span>(vector&lt;<span class="hljs-type">int</span>&gt;&amp; nums, <span class="hljs-type">int</span> target) &#123;<br>        vector&lt;vector&lt;<span class="hljs-type">int</span>&gt;&gt; ans = &#123;&#125;;<br>        vector&lt;vector&lt;<span class="hljs-type">int</span>&gt;&gt; tmp = &#123;&#125;;<br>        <span class="hljs-keyword">if</span> (nums.<span class="hljs-built_in">size</span>() &lt; <span class="hljs-number">4</span>) <span class="hljs-keyword">return</span> ans;<br>        <span class="hljs-built_in">sort</span>(nums.<span class="hljs-built_in">begin</span>(), nums.<span class="hljs-built_in">end</span>());<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; nums.<span class="hljs-built_in">size</span>() - <span class="hljs-number">3</span>; i++) &#123;<br>            <span class="hljs-keyword">if</span> (i &gt; <span class="hljs-number">0</span> &amp;&amp; nums[i] == nums[i - <span class="hljs-number">1</span>]) <span class="hljs-keyword">continue</span>;<br>            tmp = <span class="hljs-built_in">threeSum</span>(nums, target - nums[i], i+<span class="hljs-number">1</span>);<br>            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">auto</span> k : tmp) &#123;<br>                ans.<span class="hljs-built_in">push_back</span>(k);<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> ans;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><h3 id="心得-3"><a href="#心得-3" class="headerlink" title="心得"></a>心得</h3><ul><li><p>本题中出现了一些超出 int 的输入。一般 int 的范围视作 $-2147483648 ~ 2147483647$。从应试的角度，当出现$10^9$时，在进行运算时要注意换用 <code>long long</code>。</p></li><li><p>原先在处理数据结构时，总是习惯像这样 <code>long sum = nums[i] + nums[j] + nums[k];</code>，只注意等号左边。现在看来，两边都确定数据类型最好，像这样<code>long sum = (long)nums[i] + nums[j] + nums[k];</code>。</p></li></ul><h2 id="26-删除有序数组中的重复项"><a href="#26-删除有序数组中的重复项" class="headerlink" title="26. 删除有序数组中的重复项"></a><a href="https://leetcode.cn/problems/remove-duplicates-from-sorted-array/">26. 删除有序数组中的重复项</a></h2><h3 id="分析-5"><a href="#分析-5" class="headerlink" title="分析"></a>分析</h3><ul><li><p>思路1</p><p>考虑直接删除重复元素，则需要在遍历中改变 vector 长度。采用逆序遍历避免 index 错位。<code>erase</code> 函数的时间复杂度是 $O(n)$，效率不高。</p></li><li><p>思路2</p><p>利用双指针，在遍历过程中将非重复的元素值赋值到前 k 位。</p></li></ul><h3 id="代码-5"><a href="#代码-5" class="headerlink" title="代码"></a>代码</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">// 思路1</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">removeDuplicates</span><span class="hljs-params">(vector&lt;<span class="hljs-type">int</span>&gt;&amp; nums)</span> </span>&#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = nums.<span class="hljs-built_in">size</span>() - <span class="hljs-number">1</span>; i &gt; <span class="hljs-number">0</span>; i--) &#123;<br>            <span class="hljs-keyword">if</span> (nums[i] == nums[i<span class="hljs-number">-1</span>]) &#123;<br>                nums.<span class="hljs-built_in">erase</span>(nums.<span class="hljs-built_in">begin</span>() + i);<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> nums.<span class="hljs-built_in">size</span>();<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">// 思路2</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">removeDuplicates</span><span class="hljs-params">(vector&lt;<span class="hljs-type">int</span>&gt;&amp; nums)</span> </span>&#123;<br>        <span class="hljs-type">int</span> l = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt; nums.<span class="hljs-built_in">size</span>(); i++) &#123;<br>            <span class="hljs-keyword">if</span> (nums[i] != nums[l]) nums[++l] = nums[i];<br>        &#125;<br>        <span class="hljs-keyword">return</span> ++l;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><h3 id="心得-4"><a href="#心得-4" class="headerlink" title="心得"></a>心得</h3><ul><li>关注在遍历中改变 array 长度的操作</li></ul><h2 id="27-移除元素"><a href="#27-移除元素" class="headerlink" title="27. 移除元素"></a><a href="https://leetcode.cn/problems/remove-element/">27. 移除元素</a></h2><h3 id="分析-6"><a href="#分析-6" class="headerlink" title="分析"></a>分析</h3><p>两种思路，都是通过双指针实现。</p><ol><li>将原数组视作输出数组，遍历数组，将不等于 <code>val</code> 的元素排列在输出数组中（即按序排在原数组头部），这是因为输出数组的长度一定小于原数组，因此覆盖操作不会影响遍历操作。</li><li>将原数组中等于 <code>val</code> 的元素替换掉。用左指针从头开始检索出等于 <code>val</code> 的元素，用右指针从尾开始检索出不等于 <code>val</code> 的元素替换它。</li></ol><p>注意，方法1 是「覆盖」，方法2 是「替换」。因此在某些情况下 2 比 1 耗时少。</p><h3 id="代码-6"><a href="#代码-6" class="headerlink" title="代码"></a>代码</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">removeElement</span><span class="hljs-params">(vector&lt;<span class="hljs-type">int</span>&gt;&amp; nums, <span class="hljs-type">int</span> val)</span> </span>&#123;<br>        <span class="hljs-type">int</span> index = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; nums.<span class="hljs-built_in">size</span>(); i++) &#123;<br>            <span class="hljs-keyword">if</span> (nums[i] != val) nums[index++] = nums[i];<br>        &#125;<br>        <span class="hljs-keyword">return</span> index;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><h3 id="心得-5"><a href="#心得-5" class="headerlink" title="心得"></a>心得</h3><p>本题的分析中，两个方法的对比是比较有意思的。题目要求在「原数组」上操作，那么该如何看待和处理原数组的值？「覆盖」思路简单地忽略掉原先的值，而「替换」思路则将值分为 <code>==val</code> 和 <code>!=val</code> 两类。后者显然更细致，也更考验思维的深度。</p><h2 id="31-下一个排列"><a href="#31-下一个排列" class="headerlink" title="31. 下一个排列"></a><a href="https://leetcode.cn/problems/next-permutation/">31. 下一个排列</a></h2><h3 id="分析-7"><a href="#分析-7" class="headerlink" title="分析"></a>分析</h3><p>本题的数学模型并不直观。分析中，笔者给出以下直观的「推论」（显然在做题中无须对其证伪进行严谨证明）：</p><ul><li>给定一个排列，通过交换其「靠前的较小数字」和「靠后的较大数字」，必然得到一个「字典序更大的排列」；反之亦然。</li><li>给定一个排列的前缀，「满足前缀的排列」中的最小排列，它的非前缀部分必然为「非递减数列」；反之亦然。</li></ul><p>基于以上推论，笔者给出如下操作逻辑：</p><ol><li>从后往前遍历，找出第一个「在已遍历的数列中非最大」的数，作为待交换的「靠前的较小数字」。</li><li>在已遍历的数中找出「比待交换的数大的数」中最小的数，作为「靠后的较大数字」。</li><li>交换两者。</li><li>将交换后「较大数字」之后的序列排列为「非递减数列」。</li></ol><h3 id="代码-7"><a href="#代码-7" class="headerlink" title="代码"></a>代码</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">nextPermutation</span><span class="hljs-params">(vector&lt;<span class="hljs-type">int</span>&gt;&amp; nums)</span> </span>&#123;<br>        <span class="hljs-type">int</span> index = nums.<span class="hljs-built_in">size</span>() - <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">while</span> (index &gt;= <span class="hljs-number">1</span> &amp;&amp; nums[index - <span class="hljs-number">1</span>] &gt;= nums[index]) --index;<br>        <span class="hljs-keyword">if</span> (index &gt; <span class="hljs-number">0</span>) &#123;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = nums.<span class="hljs-built_in">size</span>() - <span class="hljs-number">1</span>; i &gt;= index; i--) &#123;<br>            <span class="hljs-keyword">if</span> (nums[i] &gt; nums[index - <span class="hljs-number">1</span>]) &#123;<br>                <span class="hljs-built_in">swap</span>(nums[index - <span class="hljs-number">1</span>], nums[i]);<br>                <span class="hljs-keyword">break</span>;<br>            &#125;<br>        &#125;<br>        &#125;<br>        <span class="hljs-built_in">reverse</span>(nums.<span class="hljs-built_in">begin</span>() + index, nums.<span class="hljs-built_in">end</span>());<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><h3 id="心得-6"><a href="#心得-6" class="headerlink" title="心得"></a>心得</h3><ul><li><strong>字典序</strong>可以简单理解为按照前缀排序的思路。</li></ul><h2 id="33-搜索旋转排序数组"><a href="#33-搜索旋转排序数组" class="headerlink" title="33. 搜索旋转排序数组"></a><a href="https://leetcode.cn/problems/search-in-rotated-sorted-array/">33. 搜索旋转排序数组</a></h2><h3 id="分析-8"><a href="#分析-8" class="headerlink" title="分析"></a>分析</h3><p>二分查找实现对数时间。</p><p>二分后，如果是递增序列，则套用基础的二分逻辑。如果是旋转过的数列，则根据mid所处的位置进行逻辑判断。</p><p><strong>优化思路</strong>：二分后必然有一个递增数列和一个旋转数列，且两者的数域范围不相交。通过判断target是否在递增数列中来移动双指针。</p><h3 id="代码-8"><a href="#代码-8" class="headerlink" title="代码"></a>代码</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">search</span><span class="hljs-params">(vector&lt;<span class="hljs-type">int</span>&gt;&amp; nums, <span class="hljs-type">int</span> target)</span> </span>&#123;<br>        <span class="hljs-type">int</span> left  = <span class="hljs-number">0</span>;<br>        <span class="hljs-type">int</span> right = nums.<span class="hljs-built_in">size</span>() - <span class="hljs-number">1</span>;<br>        <span class="hljs-type">int</span> mid = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">while</span> (left &lt;= right) &#123;<br>            mid = (left + right) / <span class="hljs-number">2</span>;<br>            <span class="hljs-keyword">if</span> (target == nums[mid]) <span class="hljs-keyword">return</span> mid;<br>            <span class="hljs-keyword">if</span> (nums[left] &lt;= nums[mid] &amp;&amp; nums[mid] &lt;= nums[right]) &#123;<br>                <span class="hljs-keyword">if</span> (target &lt; nums[mid]) right = mid - <span class="hljs-number">1</span>;<br>                <span class="hljs-keyword">else</span> left = mid + <span class="hljs-number">1</span>;<br>            &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (nums[mid] &gt;= nums[left]) &#123;<br>                <span class="hljs-keyword">if</span> (target &lt; nums[mid] &amp;&amp; target &gt; nums[right]) right = mid - <span class="hljs-number">1</span>;<br>                <span class="hljs-keyword">else</span> left = mid + <span class="hljs-number">1</span>;<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                <span class="hljs-keyword">if</span> (target &gt; nums[mid] &amp;&amp; target &lt; nums[left]) left = mid + <span class="hljs-number">1</span>;<br>                <span class="hljs-keyword">else</span> right = mid - <span class="hljs-number">1</span>;<br>            &#125;<br><br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><h3 id="心得-7"><a href="#心得-7" class="headerlink" title="心得"></a>心得</h3><p>二分的最直观理解：二分后判断目标可能出现在两者之一，从而缩减范围。从最直观、简单的思路出发来解决问题，是算法领域的进阶技巧，这需要不断精炼自己的思维。</p><h2 id="34-在排序数组中查找元素的第一个和最后一个位置"><a href="#34-在排序数组中查找元素的第一个和最后一个位置" class="headerlink" title="34. 在排序数组中查找元素的第一个和最后一个位置"></a><a href="https://leetcode.cn/problems/find-first-and-last-position-of-element-in-sorted-array/">34. 在排序数组中查找元素的第一个和最后一个位置</a></h2><h3 id="分析-9"><a href="#分析-9" class="headerlink" title="分析"></a>分析</h3><p>一种思路是通过二分法分别找到target的开始位置和结束位置。</p><p>由于对寻找的目标有先后要求，在循环中找到target后不能直接退出循环。而是更新信息并继续缩小范围。</p><h3 id="代码-9"><a href="#代码-9" class="headerlink" title="代码"></a>代码</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function">vector&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">searchRange</span><span class="hljs-params">(vector&lt;<span class="hljs-type">int</span>&gt;&amp; nums, <span class="hljs-type">int</span> target)</span> </span>&#123;<br>        <span class="hljs-type">int</span> n = nums.<span class="hljs-built_in">size</span>();<br>        <span class="hljs-type">int</span> l = <span class="hljs-number">0</span>;<br>        <span class="hljs-type">int</span> r = n - <span class="hljs-number">1</span>;<br>        vector&lt;<span class="hljs-type">int</span>&gt; ans = &#123;<span class="hljs-number">-1</span>, <span class="hljs-number">-1</span>&#125;;<br>        <span class="hljs-keyword">if</span> (!n) <span class="hljs-keyword">return</span> ans;<br>        <span class="hljs-keyword">while</span> (l &lt;= r) &#123;<br>            <span class="hljs-type">int</span> mid = (l + r) / <span class="hljs-number">2</span>;<br>            <span class="hljs-keyword">if</span> (nums[mid] == target) &#123;<br>                ans[<span class="hljs-number">0</span>] = mid;<br>                r = mid - <span class="hljs-number">1</span>;<br>            &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (target &lt; nums[mid]) &#123;<br>                r = mid - <span class="hljs-number">1</span>;<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                l = mid + <span class="hljs-number">1</span>;<br>            &#125;<br>        &#125;<br>        l = <span class="hljs-number">0</span>;<br>        r = n - <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">while</span> (l &lt;= r) &#123;<br>            <span class="hljs-type">int</span> mid = (l + r) / <span class="hljs-number">2</span>;<br>            <span class="hljs-keyword">if</span> (nums[mid] == target) &#123;<br>                ans[<span class="hljs-number">1</span>] = mid;<br>                l = mid + <span class="hljs-number">1</span>;<br>            &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (target &lt; nums[mid]) &#123;<br>                r = mid - <span class="hljs-number">1</span>;<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                l = mid + <span class="hljs-number">1</span>;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> ans;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><h3 id="心得-8"><a href="#心得-8" class="headerlink" title="心得"></a>心得</h3><p>强化二分法缩小范围的作用。</p><h2 id="35-搜索插入位置"><a href="#35-搜索插入位置" class="headerlink" title="35. 搜索插入位置"></a><a href="https://leetcode.cn/problems/search-insert-position/">35. 搜索插入位置</a></h2><h3 id="分析-10"><a href="#分析-10" class="headerlink" title="分析"></a>分析</h3><p>用数学语言描述题目：<code>nums[ans-1] &lt; target &lt;= nums[ans]</code>。</p><p>从而得到二分法的二分逻辑。</p><p>考虑边界情况：target 大于所有 nums 中元素。</p><h3 id="代码-10"><a href="#代码-10" class="headerlink" title="代码"></a>代码</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">searchInsert</span><span class="hljs-params">(vector&lt;<span class="hljs-type">int</span>&gt;&amp; nums, <span class="hljs-type">int</span> target)</span> </span>&#123;<br>        <span class="hljs-type">int</span> l = <span class="hljs-number">0</span>;<br>        <span class="hljs-type">int</span> r = nums.<span class="hljs-built_in">size</span>() - <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">while</span> (l &lt;= r) &#123;<br>            <span class="hljs-type">int</span> mid = (l + r) / <span class="hljs-number">2</span>;<br>            <span class="hljs-keyword">if</span> (nums[mid] &gt;= target) &#123;<br>                r = mid - <span class="hljs-number">1</span>;<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                l = mid + <span class="hljs-number">1</span>;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> l;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><h3 id="心得-9"><a href="#心得-9" class="headerlink" title="心得"></a>心得</h3><ul><li>数学化理解问题</li><li>调试时枚举边界情况</li></ul>]]></content>
    
    
    <categories>
      
      <category>算法</category>
      
    </categories>
    
    
    <tags>
      
      <tag>C++</tag>
      
      <tag>算法，不定期更新</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hyper-V禁用指南</title>
    <link href="/posts/820f.html"/>
    <url>/posts/820f.html</url>
    
    <content type="html"><![CDATA[<h1 id="Hyper-V禁用指南"><a href="#Hyper-V禁用指南" class="headerlink" title="Hyper-V禁用指南"></a>Hyper-V禁用指南</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>本文是笔者在浪费了宝贵的午睡时间尝试关闭hyper-V后写下的，难免带有极端情绪和错漏，敬请谅解。</p><p>首先，本文的面向对象是那些<strong>已经尝试过几种网上方法，重启了好几次电脑但未果</strong>的用户。本文汇总了笔者解决hyper-V关闭问题的一些经历和心得。还没尝试过几种常见关闭方法的用户先尝试那些，成功了可以节省时间。</p><!-- more --><p>然后，笔者是第二次遇到了hyper-V难以关闭的弱智问题，对于这种深埋底层、有替代方案的答辩功能笔者深恶痛绝，建议凡是需要用到ubuntu虚拟机的统一用vmware，网上资料多得是。不要随便搞windows的底层功能，出了问题难以找到正确的操作指南！！！</p><h2 id="网上常见的关闭方法与背后意义"><a href="#网上常见的关闭方法与背后意义" class="headerlink" title="网上常见的关闭方法与背后意义"></a>网上常见的关闭方法与背后意义</h2><h3 id="1-启用或关闭windows功能"><a href="#1-启用或关闭windows功能" class="headerlink" title="1. 启用或关闭windows功能"></a>1. 启用或关闭windows功能</h3><p>这也是大多数人对hyper-v的理解，网上常见的开启和关闭hyper-v功能都涉及到windows功能中的五种选项。</p><p>在<a href="https://www.bluestacks.cn/faq_detail.html?id=102?utm_campaign=nxt_cn_5.10.0.6513&utm_source=support&utm_medium=bs5_player&email=&guid=a1fadb47-fe53-4e3c-a7dc-3f3155acc025&oem=nxt_cn&client_ver=5.10.0.6513&install_id=8dcfaf9e-b801-4de2-b0c7-0bf4e30cf6d3&locale_lang=zh-TW&country=CN&vmname=Pie64&locale=zh-tw">蓝叠模拟器hyper-V解决指导</a>中展示了如下图需要关闭的几种功能。</p><p>这些功能是windows系统集成的windows功能开关，原则上通过这些开关关闭后，windows可以帮你配置底层的一些注册表、组策略等选项。好运的用户在这一步便能关闭hyper-V。</p><p><img src="https://notes.sjtu.edu.cn/uploads/upload_c025a91918ac8f7eefb44d0db872bc9e.png"></p><h3 id="2-注册表关闭"><a href="#2-注册表关闭" class="headerlink" title="2. 注册表关闭"></a>2. 注册表关闭</h3><p>同样是蓝叠介绍的方法，通过打开注册表(打开cmd窗口，输入regedit回车)，然后到“HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Control\DeviceGuard”将“EnableVirtualizationBasedSecurity”和“RequireMicrosoftSignedBootChain”两项都设置成“0”。</p><p>再到“HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Control\DeviceGuard\Scenarios下将HypervisorEnforcedCodeIntegrity的E”nabled”设置成”0”。</p><p>这个方法涉及到了修改注册表，也是上文windows功能能够自动实现的，但特殊情况下windows功能没成功关闭注册表中这些选项，因此有些教程会让你尝试关闭这几个选项。</p><p>如果完成了这一步后，仍然没有成功关闭hyper-V，那并非是你的改变无效。hyper-V包含了windows系统中好几个分散各处的功能，你仅仅关闭了其中最显眼的一个。这也是很多人尝试了网上多种方法却毫无收获的原因，其实你每一步都起到了作用，但没覆盖你所遇到的所有问题。</p><h3 id="3-管理员打开cmd"><a href="#3-管理员打开cmd" class="headerlink" title="3. 管理员打开cmd"></a>3. 管理员打开cmd</h3><p>另外有教程要求以管理员模式打开命令提示符，输入：<code>bcdedit /set hypervisorlaunchtype off</code>之后重启。</p><p>这个方法也是尝试配设内部的启动项，目的同样是关闭hyper-V。网上倒是有不少人反映这一步后解决了。</p><h3 id="4-关闭相关服务"><a href="#4-关闭相关服务" class="headerlink" title="4. 关闭相关服务"></a>4. 关闭相关服务</h3><p>在“计算机管理-服务”里把hyper-v相关服务关闭。<img src="https://notes.sjtu.edu.cn/uploads/upload_db095071f1a148576988729135cc6092.png"></p><p>说实话这个服务笔者不是很理解，windows发展到现在，给笔者的感觉就是盘根错节，为了实现hyper-v，windows内部不知道牵扯了多少功能。</p><h3 id="5-关闭内存完整性"><a href="#5-关闭内存完整性" class="headerlink" title="5. 关闭内存完整性"></a>5. 关闭内存完整性</h3><p>win11中进入windows安全中心，在「内核隔离」中关闭内存完整性。</p><p>内核完整性是win11推出的垃圾功能，即便没有hyper-v烦恼也值得关闭，它会占用性能资源。</p><h3 id="6-模拟器提供的补丁"><a href="#6-模拟器提供的补丁" class="headerlink" title="6. 模拟器提供的补丁"></a>6. 模拟器提供的补丁</h3><p>在<a href="https://www.bluestacks.cn/faq_detail.html?id=102?utm_campaign=nxt_cn_5.10.0.6513&utm_source=support&utm_medium=bs5_player&email=&guid=a1fadb47-fe53-4e3c-a7dc-3f3155acc025&oem=nxt_cn&client_ver=5.10.0.6513&install_id=8dcfaf9e-b801-4de2-b0c7-0bf4e30cf6d3&locale_lang=zh-TW&country=CN&vmname=Pie64&locale=zh-tw">蓝叠模拟器hyper-V解决指导</a>蓝叠提供了exe程序，用于帮助用户自动配置hyper-v。同时，新版的mumu模拟器在报错hyper-v后也会提供选项帮你自动配置。</p><p>很可惜的是笔者没成功。</p><h3 id="7-基于虚拟化的安全性"><a href="#7-基于虚拟化的安全性" class="headerlink" title="7. 基于虚拟化的安全性"></a>7. 基于虚拟化的安全性</h3><p>首先提一嘴的是笔者是到这一步解决问题，笔者用的是华硕、windows11专业版。</p><p>参考<a href="https://www.cnblogs.com/xdl-smile/p/12736646.html">博客园</a>，win+R后查询msinfo32，打开系统信息，查看基于虚拟化的安全性是否启动。</p><p><img src="https://notes.sjtu.edu.cn/uploads/upload_bfb0fb3c3565cfa7cea93cb84875c687.png"></p><p>如果开启了，则按照笔者引用的博客中的方案，下载微软提供的脚本并运行，重启后windows会引导你关闭基于虚拟化的安全性。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>至此，笔者已经遍历完了笔者所尝试的各种方法。笔者怀疑其中有很大部分是重复甚至无用的。因此如果你也像笔者一样尝试了几种方式未果后，笔者建议试试看「基于虚拟化的安全性」这一步，这应该是非常靠近系统底层的顽固问题，在部分人的系统中，其他配置方法都无法关闭这个功能。</p><p>最后，人生苦短，远离hyper-V。</p>]]></content>
    
    
    <categories>
      
      <category>windows</category>
      
    </categories>
    
    
    <tags>
      
      <tag>windows</tag>
      
      <tag>经验分享</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>网络资源分享</title>
    <link href="/posts/bc95.html"/>
    <url>/posts/bc95.html</url>
    
    <content type="html"><![CDATA[<h1 id="网络资源分享"><a href="#网络资源分享" class="headerlink" title="网络资源分享"></a>网络资源分享</h1><p>近十几年来，互联网商业化加速。在逐利的泥沼中，很多优质资源被掩盖在海量的数据里。本文章收录了一些互联网资源，并不定期维护更新。</p><p>此外，如果相关负责人认为笔者行为涉及侵权，请联系笔者删除。</p><!-- more --><p><strong>小贴士：可以在网页使用快捷键<code>CTRL+F</code>检索相关领域，关键词尽量简洁通俗</strong></p><h2 id="网站"><a href="#网站" class="headerlink" title="网站"></a>网站</h2><h3 id="搜索引擎"><a href="#搜索引擎" class="headerlink" title="搜索引擎"></a>搜索引擎</h3><ul><li><a href="https://kaifa.baidu.com/">开发者搜索，编程相关</a><blockquote><p>百度难得的良心网站，搜索的结果基本上集中在各类开发者网站</p></blockquote></li></ul><h3 id="多媒体制作"><a href="#多媒体制作" class="headerlink" title="多媒体制作"></a>多媒体制作</h3><ul><li><a href="https://bigjpg.com/">图片无损放大修复</a></li><li><a href="https://www.pickwant.com/#/home">图片背景消除抠图</a></li><li><a href="https://www.uupoop.com/ico/">icon 图标制作</a> </li><li><a href="https://www.iconfont.cn/">矢量图标制作下载</a></li><li><a href="http://www.pptbz.com/">PPT模板下载</a></li><li><a href="https://undraw.co/illustrations">图片下载：紫色简约卡通人</a></li><li><a href="https://www.aigei.com/">综合素材</a></li><li><a href="https://beecut.cn/online-video-editor">在线视频处理</a></li><li><a href="https://wall.alphacoders.com/?lang=Chinese">壁纸</a></li></ul><h3 id="资源下载"><a href="#资源下载" class="headerlink" title="资源下载"></a>资源下载</h3><ul><li><p><a href="https://aidi.tv/">影视电影电视剧</a></p></li><li><p><a href="https://xunlei8.cc/">迅雷电影下载</a></p></li><li><p><a href="https://www.yhdmp.cc/">动漫</a></p></li><li><p><a href="https://tool.liumingye.cn/music/?page=searchPage#/">在线音乐下载</a></p><blockquote><p>一个在线音乐平台，能找到不少音乐并下载，可以替代音乐软件</p></blockquote></li><li><p><a href="https://github.com/kanasimi/work_crawler">漫画下载</a></p><blockquote><p>github上的一个优秀漫画爬虫项目，笔者亲测可以爬取大多数免费漫画网站资源。爬取的文件为各个章节漫画图片的压缩包，解压后很方便电脑阅读。项目有详细的中文文档，配置相关环境需要有一定的程序员素养。爬取的结果为图片压缩包，推荐使用下文的ComicViewer软件阅读。</p></blockquote></li></ul><h3 id="软件资源下载"><a href="#软件资源下载" class="headerlink" title="软件资源下载"></a>软件资源下载</h3><h3 id="数据搜集"><a href="#数据搜集" class="headerlink" title="数据搜集"></a>数据搜集</h3><ul><li><a href="http://hao.199it.com/">大数据搜集</a></li><li><a href="https://www.cnbksy.com/">全国报刊索引</a></li></ul><h3 id="现实生活"><a href="#现实生活" class="headerlink" title="现实生活"></a>现实生活</h3><ul><li><a href="https://www.ehow.com/13771258/diy-spring-welcome-mat">家庭技巧/制作/DIY</a></li></ul><h2 id="app"><a href="#app" class="headerlink" title="app"></a>app</h2><h3 id="信息表达工具"><a href="#信息表达工具" class="headerlink" title="信息表达工具"></a>信息表达工具</h3><p>*<strong>win</strong></p><ul><li>git图制作： <a href="https://juejin.cn/post/6844904042448044045">ScreenToGif</a></li></ul><h3 id="文本辅助"><a href="#文本辅助" class="headerlink" title="文本辅助"></a>文本辅助</h3><ul><li>英文语法检测：<a href="https://www.grammarly.com/">grammarly(win)</a><blockquote><p>方便好用，可以有选择地自动修改，甚至都不用注册；</p></blockquote></li></ul><h3 id="日程管理"><a href="#日程管理" class="headerlink" title="日程管理"></a>日程管理</h3><ul><li>日历清单/桌面日历<a href="http://chs.desktopcal.com/">官网</a> <blockquote><p>一款支持pc和手机的简洁日程管理软件。在pc端可以固定在桌面，适合和笔者一样采用无图标桌面的用户。同时支持pc和手机同步。遗憾的是它没有买断制会员，但免费情况下可以手动同步，因此还算可用。</p></blockquote></li></ul><h3 id="跨设备交互"><a href="#跨设备交互" class="headerlink" title="跨设备交互"></a>跨设备交互</h3><ul><li><a href="https://github.com/YanxinTang/clipboard-online/blob/master/README_zh.md">基于同一局域网共享剪切板</a>  <a href="https://blog.csdn.net/axutongxue/article/details/119801830">教程</a></li></ul><h3 id="网络环境改善"><a href="#网络环境改善" class="headerlink" title="网络环境改善"></a>网络环境改善</h3><ul><li><a href="https://www.dogfight360.com/blog/">部分网站软件host修改提速</a></li></ul><h3 id="音乐相关"><a href="#音乐相关" class="headerlink" title="音乐相关"></a>音乐相关</h3><ul><li><a href="https://musescore.org/zh-hans/download/musescore.msi">打谱软件musescore</a></li><li><a href="https://www.everyonepiano.cn/Software-7-EOP-%E7%AE%80%E8%B0%B1%E5%A4%A7%E5%B8%88.html">简谱制作EOP</a></li></ul><h3 id="阅读器"><a href="#阅读器" class="headerlink" title="阅读器"></a>阅读器</h3><ul><li><p>安卓平台阅读工具：厚墨</p><blockquote><p>简洁无广告的离线阅读器，支持多种格式电子书。由于某些原因下架，在网上一些小网站可以下载，需要甄别下载渠道是否安全。</p></blockquote></li><li><p>pc平台漫画阅读工具：ComicViewer</p><blockquote><p>主要面向图片阅读的一个小型阅读器。可以实现直接阅读压缩包、自动记忆阅读位置等功能。比较小众。推荐下载路径 https://www.xitongzhijia.net/soft/164175.html</p></blockquote></li></ul><h3 id="现实生活-1"><a href="#现实生活-1" class="headerlink" title="现实生活"></a>现实生活</h3><ul><li><a href="https://www.bypass.cn/">抢火车票</a><blockquote><p> 可配置定时抢，是特殊时期的必备软件</p></blockquote></li></ul><h1 id="网上copy，暂未整理"><a href="#网上copy，暂未整理" class="headerlink" title="网上copy，暂未整理"></a>网上copy，暂未整理</h1><p>【模板库】</p><ol><li>演示星球：www.pop-ppt.com</li><li>微软 OfficePLUS：www.officeplus.cn【图片库】</li><li>免费商用 Unsplash：www.unsplash.com</li><li>免抠图透明素材 pngpix：www.pngpix.com</li><li>高清人、物PNG素材 MOOSE：https://igoutu.cn/photos【在线编辑】</li><li>人工智能绘画AutoDraw：www.autodraw.com</li><li>流体背景Fluid Simulation：paveldogreat.github.io/WebGL-Fluid-Simulation</li><li>纹理背景RUSSFUSS：russfuss.com</li><li>液态渐变星球 Nebula Artefact：https://alteredqualia.com/xg/examples/nebula_artefact.html</li><li>抽象背景Bg-Painter：bg-painter.com</li><li>渐变色 Mesh Gradient：meshgradient.com</li><li>在线作图（流程图、架构图、思维导图等）ProcessOn：www.processon.com</li><li>镝数图表：dycharts.com</li><li>花火数图（数据短视频）：hanabi.cn</li><li>在线编辑图片：iloveimg.com/zh-cn</li><li>免费在线抠图：fococlipping.com</li><li>免费样机生成器 Free Mockup Generator：mockups.pixeltrue.com18.在线文本格式转换 ACONVERT：aconvert.come</li></ol>]]></content>
    
    
    <categories>
      
      <category>资源分享</category>
      
    </categories>
    
    
    <tags>
      
      <tag>资源分享</tag>
      
      <tag>不定期更新</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>图床测试</title>
    <link href="/posts/f2eb.html"/>
    <url>/posts/f2eb.html</url>
    
    <content type="html"><![CDATA[<h1 id="图床测试"><a href="#图床测试" class="headerlink" title="图床测试"></a>图床测试</h1><p>这是测试图片<sup id="fnref:1" class="footnote-ref"><a href="#fn:1" rel="footnote"><span class="hint--top hint--rounded" aria-label="参考链接1">[1]</span></a></sup></p><p><img src="https://notes.sjtu.edu.cn/uploads/upload_572a421050d5af848e688fc45cc1a314.png"></p><!-- more --><p><img src="https://notes.sjtu.edu.cn/uploads/upload_458393b775c56a99befb35f40b4a55d6.png"><img src="https://notes.sjtu.edu.cn/uploads/upload_7721f113d4edf88a5f967dbc8b4006f4.png"><img src="https://notes.sjtu.edu.cn/uploads/upload_b9b83640380d087e75f74fbe9c883e26.png"></p><h1 id="tag插件"><a href="#tag插件" class="headerlink" title="tag插件"></a>tag插件</h1><h2 id="便签"><a href="#便签" class="headerlink" title="便签"></a>便签</h2><p class="note note-primary">标签</p><h2 id="行内标签"><a href="#行内标签" class="headerlink" title="行内标签"></a>行内标签</h2><p>行内<span class="label label-primary">Label</span></p><h2 id="勾选框"><a href="#勾选框" class="headerlink" title="勾选框"></a>勾选框</h2>            <input type="checkbox" disabled checked="checked">可以用勾选框做什么呢          <h2 id="按钮"><a href="#按钮" class="headerlink" title="按钮"></a>按钮</h2><p><a class="btn" href="url" title="title">text</a></p><h2 id="组图"><a href="#组图" class="headerlink" title="组图"></a>组图</h2><div class="group-image-container"><div class="group-image-row"><div class="group-image-wrap"><img src="https://notes.sjtu.edu.cn/uploads/upload_b9b83640380d087e75f74fbe9c883e26.png"></div><div class="group-image-wrap"><img src="https://notes.sjtu.edu.cn/uploads/upload_b9b83640380d087e75f74fbe9c883e26.png"></div><div class="group-image-wrap"><img src="https://notes.sjtu.edu.cn/uploads/upload_b9b83640380d087e75f74fbe9c883e26.png"></div></div><div class="group-image-row"><div class="group-image-wrap"><img src="https://notes.sjtu.edu.cn/uploads/upload_b9b83640380d087e75f74fbe9c883e26.png"></div><div class="group-image-wrap"><img src="https://notes.sjtu.edu.cn/uploads/upload_b9b83640380d087e75f74fbe9c883e26.png"></div></div></div><h1 id="脚注测试"><a href="#脚注测试" class="headerlink" title="脚注测试"></a>脚注测试</h1><section class="footnotes"><div class="footnote-list"><ol><li><span id="fn:1" class="footnote-text"><span>参考链接1<a href="#fnref:1" rev="footnote" class="footnote-backref"> ↩</a></span></span></li></ol></div></section>]]></content>
    
    
    <categories>
      
      <category>博客测试</category>
      
    </categories>
    
    
    <tags>
      
      <tag>博客测试，趣味</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>darknet 训练 yolov4-tiny模型</title>
    <link href="/posts/a6dc.html"/>
    <url>/posts/a6dc.html</url>
    
    <content type="html"><![CDATA[<h1 id="darknet-训练-yolov4-tiny-模型"><a href="#darknet-训练-yolov4-tiny-模型" class="headerlink" title="darknet 训练 yolov4-tiny 模型"></a>darknet 训练 yolov4-tiny 模型</h1><h2 id="为什么是-yolov4-tiny-模型："><a href="#为什么是-yolov4-tiny-模型：" class="headerlink" title="为什么是 yolov4-tiny 模型："></a>为什么是 yolov4-tiny 模型：</h2><p>相比官网教程实例采用的 yolov4 和 yolov3， yolov4-tiny 更加小巧，适合机载电脑使用。</p><!-- more --><h2 id="炼丹原料准备："><a href="#炼丹原料准备：" class="headerlink" title="炼丹原料准备："></a>炼丹原料准备：</h2><p>当代的模型训练和神秘东方帝国古老时候的炼丹技术有着高度类似性，所以又被称为“炼丹”，笑。</p><p>首先建议拍摄相应的照片素材（&gt;=500)，要求是尽量体现样本的多样性，这关系到最终模型的准确度，你也不想你的丹药废掉吧。</p><p>然后，你可以参考 <a href="https://github.com/heartexlabs/labelImg">label</a>，配置好标定软件。这里笔者更加推崇 Windows + Anaconda ，其中的 anaconda 是 windows 平台的 python 集成包，对于 python 相关的环境配置有很大的好处（你可以自行百度）。</p><p>关于后续的操作，你可以参考官网的 demo 视频，总之就是四步：1. 选择图片素材的文件夹目录 2. 选择图片标定的类别 3. 在图片上标定方框 4.保存！！！ </p><h2 id="上文火！（三体梗）总之就是开始炼丹了"><a href="#上文火！（三体梗）总之就是开始炼丹了" class="headerlink" title="上文火！（三体梗）总之就是开始炼丹了"></a>上文火！（三体梗）总之就是开始炼丹了</h2><p>你可以查看 github 这个部分 <a href="https://github.com/AlexeyAB/darknet#how-to-train-tiny-yolo-to-detect-your-custom-objects">训练</a> 以及它的上一个部分。大体上是如下几个步骤：</p><ul><li>下载预权重文件，后缀是类似 <code>.conv</code>，可以放在 darknet 主目录</li><li>修改 <code>.cfg</code> 文件，在 darknet/cfg 将其他文件内容修改（这部分需要严格参考官网文档）</li><li>在 darknet/data 内创建 <code>.name</code> <code>.data</code>文件</li><li>在 darknet/data 内创建文件夹，拷入图片素材和对应 txt 文件</li><li>创建 <code>train.txt</code>，内部写入所有图片素材的目录（建议用 excel 或 python 制作）</li></ul><p>最终，进入命令行输入官网上要求的代码，当命令行开始“翻滚”起来时，恭喜，你也是一名炼丹师了。</p><h2 id="备注"><a href="#备注" class="headerlink" title="备注"></a>备注</h2><p>本文档写得简略，建议仔细参考官方文档，同时也可以看看  <a href="https://zhuanlan.zhihu.com/p/494058726">比较好的教程</a>（有几处细节与官方不同，记得注意）。</p>]]></content>
    
    
    <categories>
      
      <category>深度学习</category>
      
    </categories>
    
    
    <tags>
      
      <tag>machine learning</tag>
      
      <tag>darknet</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
