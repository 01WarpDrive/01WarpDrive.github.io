<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Hyper-V禁用指南</title>
      <link href="/posts/820f.html"/>
      <url>/posts/820f.html</url>
      
        <content type="html"><![CDATA[<h1 id="Hyper-V禁用指南"><a href="#Hyper-V禁用指南" class="headerlink" title="Hyper-V禁用指南"></a>Hyper-V禁用指南</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>本文是笔者在浪费了宝贵的午睡时间尝试关闭hyper-V后写下的，难免带有极端情绪和错漏，敬请谅解。</p><p>首先，本文的面向对象是那些<strong>已经尝试过几种网上方法，重启了好几次电脑但未果</strong>的用户。本文汇总了笔者解决hyper-V关闭问题的一些经历和心得。还没尝试过几种常见关闭方法的用户先尝试那些，成功了可以节省时间。</p><span id="more"></span><p>然后，笔者是第二次遇到了hyper-V难以关闭的弱智问题，对于这种深埋底层、有替代方案的答辩功能笔者深恶痛绝，建议凡是需要用到ubuntu虚拟机的统一用vmware，网上资料多得是。不要随便搞windows的底层功能，出了问题难以找到正确的操作指南！！！</p><h2 id="网上常见的关闭方法与背后意义"><a href="#网上常见的关闭方法与背后意义" class="headerlink" title="网上常见的关闭方法与背后意义"></a>网上常见的关闭方法与背后意义</h2><h3 id="1-启用或关闭windows功能"><a href="#1-启用或关闭windows功能" class="headerlink" title="1. 启用或关闭windows功能"></a>1. 启用或关闭windows功能</h3><p>这也是大多数人对hyper-v的理解，网上常见的开启和关闭hyper-v功能都涉及到windows功能中的五种选项。</p><p>在<a href="https://www.bluestacks.cn/faq_detail.html?id=102?utm_campaign=nxt_cn_5.10.0.6513&utm_source=support&utm_medium=bs5_player&email=&guid=a1fadb47-fe53-4e3c-a7dc-3f3155acc025&oem=nxt_cn&client_ver=5.10.0.6513&install_id=8dcfaf9e-b801-4de2-b0c7-0bf4e30cf6d3&locale_lang=zh-TW&country=CN&vmname=Pie64&locale=zh-tw">蓝叠模拟器hyper-V解决指导</a>中展示了如下图需要关闭的几种功能。</p><p>这些功能是windows系统集成的windows功能开关，原则上通过这些开关关闭后，windows可以帮你配置底层的一些注册表、组策略等选项。好运的用户在这一步便能关闭hyper-V。</p><p><img src="https://notes.sjtu.edu.cn/uploads/upload_c025a91918ac8f7eefb44d0db872bc9e.png"></p><h3 id="2-注册表关闭"><a href="#2-注册表关闭" class="headerlink" title="2. 注册表关闭"></a>2. 注册表关闭</h3><p>同样是蓝叠介绍的方法，通过打开注册表(打开cmd窗口，输入regedit回车)，然后到“HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Control\DeviceGuard”将“EnableVirtualizationBasedSecurity”和“RequireMicrosoftSignedBootChain”两项都设置成“0”。</p><p>再到“HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Control\DeviceGuard\Scenarios下将HypervisorEnforcedCodeIntegrity的E”nabled”设置成”0”。</p><p>这个方法涉及到了修改注册表，也是上文windows功能能够自动实现的，但特殊情况下windows功能没成功关闭注册表中这些选项，因此有些教程会让你尝试关闭这几个选项。</p><p>如果完成了这一步后，仍然没有成功关闭hyper-V，那并非是你的改变无效。hyper-V包含了windows系统中好几个分散各处的功能，你仅仅关闭了其中最显眼的一个。这也是很多人尝试了网上多种方法却毫无收获的原因，其实你每一步都起到了作用，但没覆盖你所遇到的所有问题。</p><h3 id="3-管理员打开cmd"><a href="#3-管理员打开cmd" class="headerlink" title="3. 管理员打开cmd"></a>3. 管理员打开cmd</h3><p>另外有教程要求以管理员模式打开命令提示符，输入：<code>bcdedit /set hypervisorlaunchtype off</code>之后重启。</p><p>这个方法也是尝试配设内部的启动项，目的同样是关闭hyper-V。网上倒是有不少人反映这一步后解决了。</p><h3 id="4-关闭相关服务"><a href="#4-关闭相关服务" class="headerlink" title="4. 关闭相关服务"></a>4. 关闭相关服务</h3><p>在“计算机管理-服务”里把hyper-v相关服务关闭。<img src="https://notes.sjtu.edu.cn/uploads/upload_db095071f1a148576988729135cc6092.png"></p><p>说实话这个服务笔者不是很理解，windows发展到现在，给笔者的感觉就是盘根错节，为了实现hyper-v，windows内部不知道牵扯了多少功能。</p><h3 id="5-关闭内存完整性"><a href="#5-关闭内存完整性" class="headerlink" title="5. 关闭内存完整性"></a>5. 关闭内存完整性</h3><p>win11中进入windows安全中心，在「内核隔离」中关闭内存完整性。</p><p>内核完整性是win11推出的垃圾功能，即便没有hyper-v烦恼也值得关闭，它会占用性能资源。</p><h3 id="6-模拟器提供的补丁"><a href="#6-模拟器提供的补丁" class="headerlink" title="6. 模拟器提供的补丁"></a>6. 模拟器提供的补丁</h3><p>在<a href="https://www.bluestacks.cn/faq_detail.html?id=102?utm_campaign=nxt_cn_5.10.0.6513&utm_source=support&utm_medium=bs5_player&email=&guid=a1fadb47-fe53-4e3c-a7dc-3f3155acc025&oem=nxt_cn&client_ver=5.10.0.6513&install_id=8dcfaf9e-b801-4de2-b0c7-0bf4e30cf6d3&locale_lang=zh-TW&country=CN&vmname=Pie64&locale=zh-tw">蓝叠模拟器hyper-V解决指导</a>蓝叠提供了exe程序，用于帮助用户自动配置hyper-v。同时，新版的mumu模拟器在报错hyper-v后也会提供选项帮你自动配置。</p><p>很可惜的是笔者没成功。</p><h3 id="7-基于虚拟化的安全性"><a href="#7-基于虚拟化的安全性" class="headerlink" title="7. 基于虚拟化的安全性"></a>7. 基于虚拟化的安全性</h3><p>首先提一嘴的是笔者是到这一步解决问题，笔者用的是华硕、windows11专业版。</p><p>参考<a href="https://www.cnblogs.com/xdl-smile/p/12736646.html">博客园</a>，win+R后查询msinfo32，打开系统信息，查看基于虚拟化的安全性是否启动。</p><p><img src="https://notes.sjtu.edu.cn/uploads/upload_bfb0fb3c3565cfa7cea93cb84875c687.png"></p><p>如果开启了，则按照笔者引用的博客中的方案，下载微软提供的脚本并运行，重启后windows会引导你关闭基于虚拟化的安全性。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>至此，笔者已经遍历完了笔者所尝试的各种方法。笔者怀疑其中有很大部分是重复甚至无用的。因此如果你也像笔者一样尝试了几种方式未果后，笔者建议试试看「基于虚拟化的安全性」这一步，这应该是非常靠近系统底层的顽固问题，在部分人的系统中，其他配置方法都无法关闭这个功能。</p><p>最后，人生苦短，远离hyper-V。</p>]]></content>
      
      
      <categories>
          
          <category> windows </category>
          
      </categories>
      
      
        <tags>
            
            <tag> -经验分享 -windows </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/posts/0.html"/>
      <url>/posts/0.html</url>
      
        <content type="html"><![CDATA[<h1 id="vscode-快捷键入门"><a href="#vscode-快捷键入门" class="headerlink" title="vscode 快捷键入门"></a>vscode 快捷键入门</h1><p><strong>快捷键可以在vscode左下角齿轮标志中「键盘快捷方式」中搜索，例如搜索「窗口」，可以看到相关功能以及对应快捷键。</strong></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>拆轮子（一）</title>
      <link href="/posts/ebc4.html"/>
      <url>/posts/ebc4.html</url>
      
        <content type="html"><![CDATA[<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>在尝试造轮子的过程中，笔者常常感到缺乏工程经验。回顾已有的学习经历，自己所学习的能力归纳起来仅仅是：</p><ul><li>C++ Python浅显的编程技巧</li><li>基于命令行界面交互的简单计算代码</li><li>特定方向的环境搭建及使用</li><li>常见数据结构与算法</li></ul><p>网络上常见的CS指导都专注于理论研究，即语言、工具讲解，优质课程学习等，因此笔者缺乏应用层面的视野，也无法辨别理论知识的价值，无法直观地构建理论框架。</p><p>因此笔者希望能够由小及大，由点到面，撰写一份工程复现清单，同时简单记录自己的心得。这里的工程指的是计算机相关的优秀开源项目。</p><span id="more"></span><h1 id="indicator"><a href="#indicator" class="headerlink" title="indicator"></a>indicator</h1><blockquote><p>构建C++库</p></blockquote><h2 id="资源"><a href="#资源" class="headerlink" title="资源"></a>资源</h2><ul><li><a href="https://github.com/p-ranav">github源文件</a></li><li><a href="https://www.cppstories.com/2020/02/inidicators.html/">作者撰写的项目介绍</a></li></ul><h2 id="笔记"><a href="#笔记" class="headerlink" title="笔记"></a>笔记</h2><ul><li>target：to write a library that displays a task activity indication for multithreading applications</li><li>functions:<ul><li>Thread-safe - we’re able to update the progress bar state from multiple threads</li><li>Informative - we’re able to provide useful stats, e.g., percentage completed, time elapsed etc.</li><li>Configurable - we’re able to set the bar width, color and style<blockquote><p>安全性、信息效率、可配置，三个原则</p></blockquote></li></ul></li><li>data struction: assume progress is measured as a float in <code>[0.0f, 100.0f]</code> with the semantics: <code>25</code>.0f implies 25% completed<blockquote><p>简单高效的数据载体</p></blockquote></li></ul><h1 id=""><a href="#" class="headerlink" title=""></a></h1>]]></content>
      
      
      <categories>
          
          <category> 项目合集 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 拆轮子 </tag>
            
            <tag> 自学 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>手搓操作系统（一）</title>
      <link href="/posts/230.html"/>
      <url>/posts/230.html</url>
      
        <content type="html"><![CDATA[<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>笔者在网上看到有人推荐MIT 6.828，<a href="https://www.zhihu.com/question/551946470/answer/2822552983">原文</a>。如果能全程跟进这个课程，便能手搓一个mini操作系统内核。太酷了！立马加上日程。</p><span id="more"></span><p>在调查过程中发现，如今MIT 6.828已经作为研究生课程，而更适合本科生（菜鸟）入门的是MIT 6.S081，它的入门难度更低，并且在网上（B站）有完整的中文字幕视频。因此，作为菜鸟，我毅然决然地选择了MIT 6.S081。</p><p>我将在博客开设「操作系统」分类,并将我学习过程中的笔记和思考记录成系列「手搓操作系统」。</p><p>按照预期，本系列将记录笔者学习课程内容的全部记录，其行文顺序和大纲安排依照笔者的实际学习顺序。因此，读者可以跟随本系列完成相应的学习。</p><h1 id="入门"><a href="#入门" class="headerlink" title="入门"></a>入门</h1><p>首先先列出部分参考网站：</p><ul><li><a href="https://pdos.csail.mit.edu/6.S081/2020/schedule.html">S081的官网，主要学习资料</a></li><li><a href="https://www.bilibili.com/video/BV19k4y1C7kA/?spm_id_from=333.1007.top_right_bar_window_history.content.click&vd_source=8454ab826a14f828220a9319be9bc502">S081教学视频，主要学习资料</a></li><li><a href="https://pdos.csail.mit.edu/6.S081/2020/xv6/book-riscv-rev1.pdf">xv6说明文档</a><blockquote><p>xv6为课程教学用的简单系统。在这儿笔者提供的是2020版的文档，读者应当到官网上确认文档是否更新，看新不看旧。</p></blockquote></li><li><a href="https://th0ar.gitbooks.io/xv6-chinese/content/">xv6中文文档</a></li></ul><h1 id="LEC1-了解操作系统"><a href="#LEC1-了解操作系统" class="headerlink" title="LEC1-了解操作系统"></a>LEC1-了解操作系统</h1><h2 id="xv6简介"><a href="#xv6简介" class="headerlink" title="xv6简介"></a>xv6简介</h2><p>xv6是MIT 开发的一个教学用的完整的类 Unix 操作系统，可以运行在RISC-V微处理器上。在本课程中，将在Linux中的QEMU机器模拟器上运行xv6。</p><p>对于非Linux系统用户来说，运行xv6需要先安装虚拟机软件模拟Linux系统环境，如果你没有接触过虚拟机，笔者建议你先找个虚拟机相关的博客照着耍一耍。windows用户常用的虚拟机软件为VMware。</p><blockquote><p>熟练使用Linux环境对之后的课程有很大帮助，因此建议先找一些简单的linux技术项目练手，熟悉linux的快捷操作。</p></blockquote><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>先准备好Linux环境（版本随意，笔者使用Ubuntu20.04），然后参考<a href="https://zhuanlan.zhihu.com/p/509870434">xv6 专栏索引</a>，完成前三篇文章的内容，实现xv6的启动。</p><p>其中，在「[xv6] xv6 的运行环境搭建」中编译QEMU时，要求输入如下代码：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">../configure --target-list=riscv64-softmmu &amp;&amp; make</span><br></pre></td></tr></table></figure><p>之后报错：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Dependency &quot;pixman-1&quot; not found, tried pkgconfig</span><br></pre></td></tr></table></figure><p>解决方案为：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install libpixman-1-dev</span><br></pre></td></tr></table></figure><h2 id="视频P1"><a href="#视频P1" class="headerlink" title="视频P1"></a>视频P1</h2><p>完成xv6的安装后可以开始看B站视频P1。在P1的后半部分，老师介绍了一些xv6中的指令如fork、echo等，通过理解这些指令的功能和实现，笔者初步理解了xv6的具体表现形式。它是一群底层函数的集群，对内存、处理器等硬件状态进行修改。同时，老师引入的一些概念如内存、进程等也揭示了本课程的具体研究对象。</p><p>值得注意的是，视频中一些功能如copy并不在现有的xv6中，仅为教学时方便理解而讲授。</p><h2 id="阅读材料"><a href="#阅读材料" class="headerlink" title="阅读材料"></a>阅读材料</h2><p>完成p1的入门后，笔者开始阅读081官网为lec1提供的阅读材料。</p><p>首先是lec1部分的introduction和examples。introduction部分简单讲解了os的概念和部分xv6的示例函数代码，可以巩固视频p1的所学内容。</p><p>然后是阅读xv6的说明文档chapter 1：Operating system interfaces。还未适应英文阅读的读者可以配合xv6中文文档使用。</p><h2 id="笔记"><a href="#笔记" class="headerlink" title="笔记"></a>笔记</h2><h3 id="部分词汇概念"><a href="#部分词汇概念" class="headerlink" title="部分词汇概念"></a>部分词汇概念</h3><ul><li>file descriptor（文件描述符）：<ul><li>内核为了高效管理已被打开的文件所创建的索引，用于指代被打开的文件，对文件所有 I/O 操作相关的系统调用都需要通过文件描述符；</li><li>代码中使用缩写fd作为int类型变量名，指代索引；</li><li>unix中约定0为标准输入，1为标准输出；</li></ul></li><li>system calls：系统调用“System calls”是应用程序和系统内核交互的桥梁</li><li>process identifier：简写为pid或PID，有别于pid控制算法</li></ul><h3 id="xv6说明文档chapter-1笔记"><a href="#xv6说明文档chapter-1笔记" class="headerlink" title="xv6说明文档chapter_1笔记"></a>xv6说明文档chapter_1笔记</h3><blockquote><p>笔记仅仅为笔者对文档的理解概括。在笔者看来，初学者应当亲自写一份笔记；而完成一遍学习的人可以参考他人的笔记，对比他人的思考差异。</p></blockquote><h4 id="introduction"><a href="#introduction" class="headerlink" title="introduction"></a>introduction</h4><ul><li>why do we need an operating system?<ul><li>to share a computer among multiple programs</li><li>provide controlled ways for programs to interact</li></ul></li><li>xv6 takes the traditional form of a kernel：<ul><li>a special program that provides services to running programs</li><li>Each running program, called a process, has memory containing instructions, data, and a stack</li><li>a process  invokes a system call; the system call enters the kernel; the kernel performs the service and returns</li></ul></li><li>what will we learn?<ul><li>The rest of this chapter outlines xv6’s services—processes, memory, file descriptors, pipes,and a file system</li></ul></li></ul><h4 id="Processes-and-memory"><a href="#Processes-and-memory" class="headerlink" title="Processes and memory"></a>Processes and memory</h4><ul><li><p>process</p><ul><li>an xv6 process consists of user-space memory (instructions, data, stack) and per-process state private to the kernel</li><li>Xv6 time-shares processes: transparently switch the available CPUs among the set of processes waiting to execute</li><li><em>fork</em> creates the child process with the exactly memory contnets as the parent process<ul><li>In the parent, fork returns thechild’s PID; in the child, fork returns zero</li></ul></li></ul></li><li><p>functions:</p><ul><li><em>exit</em> : causes the calling process to stop executing and to release resources such asmemory and open files</li><li><em>wait</em> : returns the PID of an exited (or killed) child ofthe current process and copies the exit status of the child to the address passed to wait; if none ofthe caller’s children has exited, wait waits for one to do so</li><li><em>exec</em> : replaces the calling process’s memory with a new memory image loadedfrom a file stored in the file system</li></ul></li><li><p>the xv6 shell: the main loop reads a line of input from the user with <em>get cmd</em>; then it calls <em>fork</em>, which creates a copy of the shell process; the parent calls <em>wait</em>, while the child runs the commands</p><ul><li>why <em>fork</em> and <em>exec</em> are not combined in a single call:   <ul><li>To avoid the wastefulnessof creating a duplicate process and then immediately replacing it (with <em>exec</em>), operating kernelsoptimize the implementation of <em>fork</em> for this use case by using virtual memory techniques suchas copy-on-write</li><li>between thetwo, the shell has a chance to redirect the child’s I/O without disturbing the I/O setup of the mainshell</li></ul></li></ul></li></ul><h4 id="I-O-and-File-descriptors"><a href="#I-O-and-File-descriptors" class="headerlink" title="I/O and File descriptors"></a>I/O and File descriptors</h4><ul><li><p>a <em>file descriptor</em> is a small number representing a kernel-managed object that a process may read from or write to</p><ul><li>be used as an index into a per-process table, so that every process has a private space of file descriptors starting at zero</li><li>a process readsfrom file descriptor 0 (standard input), writes output to file descriptor 1 (standard output), andwrites error messages to file descriptor 2 (standard error)</li><li><em>file descriptors</em> and <em>fork</em> interact to make the I/O redirection easy to implement</li><li>Although fork copies the file descriptor table, each underlying file offset is shared betweenparent and child；This behavior helps produce sequential output from sequences of shellcommands</li></ul></li><li><p>functions:</p><ul><li>The call <em>read(fd, buf, n)</em> reads at most <em>n</em> bytes from the file descriptor <em>fd</em>, copiesthem into <em>buf</em>, and returns the number of bytes read; Each file descriptor that refers to a file has anoffset associated with it</li><li>The call <em>write(fd, buf, n)</em> writes <em>n</em> bytes from <em>buf</em> to the file descriptor <em>fd</em> and returns thenumber of bytes written; Like <em>read</em>,</li></ul></li><li><p>write* writes data at the current file offset and then advances that offset by the number of byteswritten</p><ul><li>The <em>close</em> system call releases a file descriptor, making it free for reuse by a future <em>open</em>,</li></ul></li><li><p>pipe*, or <em>dup</em> system call</p><ul><li>The <em>dup</em> system call duplicates an existing file descriptor, returning a new one that refers tothe same underlying I/O object. Both file descriptors share an offset</li></ul></li><li><p>details:</p><ul><li>Two file descriptors share an offset if they were derived from the same original file descriptorby a sequence of fork and dup calls. Otherwise file descriptors do not share offsets, even if theyresulted from open calls for the same file</li></ul></li></ul><h4 id="Pipes"><a href="#Pipes" class="headerlink" title="Pipes"></a>Pipes</h4><p><a href="https://blog.csdn.net/skyroben/article/details/71513385">pipe概念介绍</a></p><ul><li>A <em>pipe</em> is a small kernel buffer exposed to processes as a pair of file descriptors, one for reading and one for writing<ul><li>Pipes provide a way for processes to communicate</li></ul></li><li></li></ul>]]></content>
      
      
      <categories>
          
          <category> 操作系统 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> -操作系统 -自学 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SJTU_ACMOJ 1173. 一道排序题</title>
      <link href="/posts/ca6a.html"/>
      <url>/posts/ca6a.html</url>
      
        <content type="html"><![CDATA[<h1 id="SJTU-ACMOJ-1173-一道排序题"><a href="#SJTU-ACMOJ-1173-一道排序题" class="headerlink" title="SJTU_ACMOJ 1173. 一道排序题"></a>SJTU_ACMOJ 1173. 一道排序题</h1><h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><p>萌萌的死神最讨厌数学题了，讨厌讨厌真是讨厌死了。</p><p>这不，死神一生的好朋友gingkgo又拿数学题来难为他了。接到题目后，死神原本眉飞色舞的脸瞬间石化了，真是讨厌死了。</p><p>幸亏还有你们这群好朋友呢！如果没有的话，事情才不知道会怎么样呢！</p><p>现在问题来了，给你2个数组a[]和b[]，他们有相同的长度n，你可以任意交换一个数组中的元素，我们定义函数$x=∑a[i]∗b[i]$</p><p>现在，死神请你告诉他，x最大可以取到多少，最小可以取到多少？真是讨厌死了。</p><span id="more"></span><h3 id="输入格式"><a href="#输入格式" class="headerlink" title="输入格式"></a>输入格式</h3><p>第一行一个整数n，代表数组的长度；</p><p>第二行数组a，最后一行数组b；</p><h3 id="输出格式"><a href="#输出格式" class="headerlink" title="输出格式"></a>输出格式</h3><p>输出两个整数代表答案；</p><h3 id="样例输入"><a href="#样例输入" class="headerlink" title="样例输入"></a>样例输入</h3><p>210 310 9</p><h3 id="样例输出"><a href="#样例输出" class="headerlink" title="样例输出"></a>样例输出</h3><p>127 120</p><h3 id="数据范围"><a href="#数据范围" class="headerlink" title="数据范围"></a>数据范围</h3><p>对于40%的数据，$n \leq 10n≤10$；</p><p>对于100%的数据，$n \leq 100000n≤100000 ，1 \leq a[i] , b[i] \leq 1000001≤a[i],b[i]≤100000$；</p><h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><h3 id="抽象归纳"><a href="#抽象归纳" class="headerlink" title="抽象归纳"></a>抽象归纳</h3><p>一个数组理解为不可变的数据，另一个数组理解为一组权重值。寻找使得综合最小的权重匹配。</p><blockquote><p>很遗憾笔者阅历有限，没能为这种问题找到专业的术语。</p></blockquote><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><p>说实话，这题的出题者很善良。标题写得清清楚楚，是“一道排序题”。顺着这个思想想下去，很容易意识到，可以先将两个数组按照从小到大排序。然后按顺序依次相乘得到最大值，按逆序依次相乘得到最小值。</p><h3 id="回顾排序算法"><a href="#回顾排序算法" class="headerlink" title="回顾排序算法"></a>回顾排序算法</h3><p>接下来笔者需要找到一种时间复杂度较低的算法。铛铛挡！它就是快速排序。</p><p>快速排序的基本思想是在序列中找一个数据元素，将所有数据分为小于它和大于它两组。对这两组继续上述算法。显然，是以递归形式实现。</p><p>快排的难点可能在于如何划分。笔者简单解释下其中一个简单的方式。该方法的算法思想是对撞双指针（双指针是很有意思的算法思想，以后笔者会专门写个系列）。</p><ul><li>首先，将low中的元素放在变量k中</li><li>然后从右到左检查，如果high位置的值大于k，则该值不变，high指针左移</li><li>如果high位置的值小于k，则将它放入low位置，该位置空出；</li><li>low指针从左到右检查，之后同理重复</li><li>直到low和high重叠，将k放入该位置</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 输入待排序列，左指针、右指针；</span></span><br><span class="line"><span class="comment"> * 这里的指针并非C++意义上的指针，而算法思想上的指针，笔者喜欢这样的描述方式；</span></span><br><span class="line"><span class="comment"> * 在该函数中，左右指针为左右下标，用于表示子序列；</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">quickSort</span><span class="params">(<span class="type">int</span> a[], <span class="type">int</span> low, <span class="type">int</span> high)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> mid;</span><br><span class="line">    <span class="keyword">if</span> (low &gt;= high) <span class="keyword">return</span>; <span class="comment">// 写递归先写终止条件</span></span><br><span class="line">    mid = <span class="built_in">divide</span>(a, low, high); <span class="comment">// 划分函数</span></span><br><span class="line">    <span class="built_in">quickSort</span>(a, low, mid - <span class="number">1</span>); <span class="comment">// 左排序</span></span><br><span class="line">    <span class="built_in">quickSort</span>(a, mid + <span class="number">1</span>, high); <span class="comment">// 右排序</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 在乱序序列中挑一个标准元素有多种方法；</span></span><br><span class="line"><span class="comment"> * 理想情况下应当选择中位数；</span></span><br><span class="line"><span class="comment"> * 本示例选择序列第一个元素；</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">divide</span><span class="params">(<span class="type">int</span> a[], <span class="type">int</span> low, <span class="type">int</span> high)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> k = a[low]; <span class="comment">// 标准元素</span></span><br><span class="line">    <span class="keyword">do</span> &#123;</span><br><span class="line">        <span class="keyword">while</span> (low &lt; high &amp;&amp; a[high] &gt;= k) --high; <span class="comment">// 从右到左扫描</span></span><br><span class="line">        <span class="keyword">if</span> (low &lt; high) &#123; a[low] = a[high]; ++low; &#125; <span class="comment">// 互换</span></span><br><span class="line">        <span class="keyword">while</span> (low &lt; high &amp;&amp; a[low] &lt;= k)++low; <span class="comment">// 从左到右扫描</span></span><br><span class="line">        <span class="keyword">if</span> (low &lt; high) &#123; a[high] = a[low]; --high; &#125;</span><br><span class="line">    &#125; <span class="keyword">while</span> (low != high);</span><br><span class="line">    a[low] = k;</span><br><span class="line">    <span class="keyword">return</span> low;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h3><p>在掌握了快排后，笔者惯例性地考虑数据范围。显然单个元素在int范围；但最终计算得到结果会大于int范围，因此笔者直接用long long类型存储计算结果。</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 在乱序序列中挑一个标准元素有多种方法；</span></span><br><span class="line"><span class="comment"> * 理想情况下应当选择中位数；</span></span><br><span class="line"><span class="comment"> * 本示例选择序列第一个元素；</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">divide</span><span class="params">(<span class="type">int</span>* a, <span class="type">int</span> low, <span class="type">int</span> high)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> k = a[low]; <span class="comment">// 标准元素</span></span><br><span class="line">    <span class="keyword">do</span> &#123;</span><br><span class="line">        <span class="keyword">while</span> (low &lt; high &amp;&amp; a[high] &gt;= k) --high; <span class="comment">// 从右到左扫描</span></span><br><span class="line">        <span class="keyword">if</span> (low &lt; high) &#123; a[low] = a[high]; ++low; &#125; <span class="comment">// 互换</span></span><br><span class="line">        <span class="keyword">while</span> (low &lt; high &amp;&amp; a[low] &lt;= k)++low; <span class="comment">// 从左到右扫描</span></span><br><span class="line">        <span class="keyword">if</span> (low &lt; high) &#123; a[high] = a[low]; --high; &#125;</span><br><span class="line">    &#125; <span class="keyword">while</span> (low != high);</span><br><span class="line">    a[low] = k;</span><br><span class="line">    <span class="keyword">return</span> low;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/* 输入待排序列，左指针、右指针；</span></span><br><span class="line"><span class="comment"> * 这里的指针并非C++意义上的指针，而算法思想上的指针，笔者喜欢这样的描述方式；</span></span><br><span class="line"><span class="comment"> * 在该函数中，左右指针为左右下标，用于表示子序列；</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">quickSort</span><span class="params">(<span class="type">int</span>* a, <span class="type">int</span> low, <span class="type">int</span> high)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> mid;</span><br><span class="line">    <span class="keyword">if</span> (low &gt;= high) <span class="keyword">return</span>; <span class="comment">// 写递归先写终止条件</span></span><br><span class="line">    mid = <span class="built_in">divide</span>(a, low, high); <span class="comment">// 划分函数</span></span><br><span class="line">    <span class="built_in">quickSort</span>(a, low, mid - <span class="number">1</span>); <span class="comment">// 左排序</span></span><br><span class="line">    <span class="built_in">quickSort</span>(a, mid + <span class="number">1</span>, high); <span class="comment">// 右排序</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line">    cin &gt;&gt; n;</span><br><span class="line">    <span class="type">int</span>* a, * b;</span><br><span class="line">    a = <span class="keyword">new</span> <span class="type">int</span>[n];</span><br><span class="line">    b = <span class="keyword">new</span> <span class="type">int</span>[n];</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        cin &gt;&gt; a[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        cin &gt;&gt; b[i];</span><br><span class="line">    &#125; </span><br><span class="line"></span><br><span class="line">    <span class="built_in">quickSort</span>(a, <span class="number">0</span>, n - <span class="number">1</span>);</span><br><span class="line">    <span class="built_in">quickSort</span>(b, <span class="number">0</span>, n - <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">    <span class="type">long</span> <span class="type">long</span> max = <span class="number">0</span>; <span class="comment">// 单个数据元素在int范围内，积的和可能大于int</span></span><br><span class="line">    <span class="type">long</span> <span class="type">long</span> min = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        max += (<span class="type">long</span> <span class="type">long</span>)a[i] * (<span class="type">long</span> <span class="type">long</span>)b[i];</span><br><span class="line">        min += (<span class="type">long</span> <span class="type">long</span>)a[i] * (<span class="type">long</span> <span class="type">long</span>)b[n<span class="number">-1</span>-i];</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; max &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; min &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">delete</span>[] a;</span><br><span class="line">    <span class="keyword">delete</span>[] b;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 数据结构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ACMOJ </tag>
            
            <tag> 算法题 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>互联网资源</title>
      <link href="/posts/bc95.html"/>
      <url>/posts/bc95.html</url>
      
        <content type="html"><![CDATA[<h1 id="互联网资源"><a href="#互联网资源" class="headerlink" title="互联网资源"></a>互联网资源</h1><p>近十几年来，互联网商业化加速。在逐利的泥沼中，很多优质资源被掩盖在海量的数据里。本文章收录了一些互联网资源，并不定期维护更新。</p><p>此外，如果相关负责人认为笔者行为涉及侵权，请联系笔者删除。</p><span id="more"></span><p><strong>小贴士：可以在网页使用快捷键<code>CTRL+F</code>检索相关领域，关键词尽量简洁通俗</strong></p><h2 id="网站"><a href="#网站" class="headerlink" title="网站"></a>网站</h2><h3 id="搜索引擎"><a href="#搜索引擎" class="headerlink" title="搜索引擎"></a>搜索引擎</h3><ul><li><a href="https://kaifa.baidu.com/">开发者搜索，编程相关</a><blockquote><p>百度难得的良心网站，搜索的结果基本上集中在各类开发者网站</p></blockquote></li></ul><h3 id="多媒体制作"><a href="#多媒体制作" class="headerlink" title="多媒体制作"></a>多媒体制作</h3><ul><li><a href="https://bigjpg.com/">图片无损放大修复</a></li><li><a href="https://www.pickwant.com/#/home">图片背景消除抠图</a></li><li><a href="https://www.uupoop.com/ico/">icon 图标制作</a> </li><li><a href="https://www.iconfont.cn/">矢量图标制作下载</a></li><li><a href="http://www.pptbz.com/">PPT模板下载</a></li><li><a href="https://undraw.co/illustrations">图片下载：紫色简约卡通人</a></li><li><a href="https://www.aigei.com/">综合素材</a></li><li><a href="https://beecut.cn/online-video-editor">在线视频处理</a></li><li><a href="https://wall.alphacoders.com/?lang=Chinese">壁纸</a></li></ul><h3 id="资源下载"><a href="#资源下载" class="headerlink" title="资源下载"></a>资源下载</h3><ul><li><p><a href="https://aidi.tv/">影视电影电视剧</a></p></li><li><p><a href="https://xunlei8.cc/">迅雷电影下载</a></p></li><li><p><a href="https://www.yhdmp.cc/">动漫</a></p></li><li><p><a href="https://tool.liumingye.cn/music/?page=searchPage#/">在线音乐下载</a></p><blockquote><p>一个在线音乐平台，能找到不少音乐并下载，可以替代音乐软件</p></blockquote></li><li><p><a href="https://github.com/kanasimi/work_crawler">漫画下载</a></p><blockquote><p>github上的一个优秀漫画爬虫项目，笔者亲测可以爬取大多数免费漫画网站资源。爬取的文件为各个章节漫画图片的压缩包，解压后很方便电脑阅读。项目有详细的中文文档，配置相关环境需要有一定的程序员素养。爬取的结果为图片压缩包，推荐使用下文的ComicViewer软件阅读。</p></blockquote></li></ul><h3 id="软件资源下载"><a href="#软件资源下载" class="headerlink" title="软件资源下载"></a>软件资源下载</h3><h3 id="数据搜集"><a href="#数据搜集" class="headerlink" title="数据搜集"></a>数据搜集</h3><ul><li><a href="http://hao.199it.com/">大数据搜集</a></li><li><a href="https://www.cnbksy.com/">全国报刊索引</a></li></ul><h3 id="现实生活"><a href="#现实生活" class="headerlink" title="现实生活"></a>现实生活</h3><ul><li><a href="https://www.ehow.com/13771258/diy-spring-welcome-mat">家庭技巧/制作/DIY</a></li></ul><h2 id="app"><a href="#app" class="headerlink" title="app"></a>app</h2><h3 id="信息表达工具"><a href="#信息表达工具" class="headerlink" title="信息表达工具"></a>信息表达工具</h3><p>*<strong>win</strong></p><ul><li>git图制作： <a href="https://juejin.cn/post/6844904042448044045">ScreenToGif</a></li></ul><h3 id="文本辅助"><a href="#文本辅助" class="headerlink" title="文本辅助"></a>文本辅助</h3><ul><li>英文语法检测：<a href="https://www.grammarly.com/">grammarly(win)</a><blockquote><p>方便好用，可以有选择地自动修改，甚至都不用注册；</p></blockquote></li></ul><h3 id="日程管理"><a href="#日程管理" class="headerlink" title="日程管理"></a>日程管理</h3><ul><li>日历清单/桌面日历<a href="http://chs.desktopcal.com/">官网</a> <blockquote><p>一款支持pc和手机的简洁日程管理软件。在pc端可以固定在桌面，适合和笔者一样采用无图标桌面的用户。同时支持pc和手机同步。遗憾的是它没有买断制会员，但免费情况下可以手动同步，因此还算可用。</p></blockquote></li></ul><h3 id="跨设备交互"><a href="#跨设备交互" class="headerlink" title="跨设备交互"></a>跨设备交互</h3><ul><li><a href="https://github.com/YanxinTang/clipboard-online/blob/master/README_zh.md">基于同一局域网共享剪切板</a>  <a href="https://blog.csdn.net/axutongxue/article/details/119801830">教程</a></li></ul><h3 id="网络环境改善"><a href="#网络环境改善" class="headerlink" title="网络环境改善"></a>网络环境改善</h3><ul><li><a href="https://www.dogfight360.com/blog/">部分网站软件host修改提速</a></li></ul><h3 id="音乐相关"><a href="#音乐相关" class="headerlink" title="音乐相关"></a>音乐相关</h3><ul><li><a href="https://musescore.org/zh-hans/download/musescore.msi">打谱软件musescore</a></li><li><a href="https://www.everyonepiano.cn/Software-7-EOP-%E7%AE%80%E8%B0%B1%E5%A4%A7%E5%B8%88.html">简谱制作EOP</a></li></ul><h3 id="阅读器"><a href="#阅读器" class="headerlink" title="阅读器"></a>阅读器</h3><ul><li><p>安卓平台阅读工具：厚墨</p><blockquote><p>简洁无广告的离线阅读器，支持多种格式电子书。由于某些原因下架，在网上一些小网站可以下载，需要甄别下载渠道是否安全。</p></blockquote></li><li><p>pc平台漫画阅读工具：ComicViewer</p><blockquote><p>主要面向图片阅读的一个小型阅读器。可以实现直接阅读压缩包、自动记忆阅读位置等功能。比较小众。推荐下载路径 https://www.xitongzhijia.net/soft/164175.html</p></blockquote></li></ul><h3 id="现实生活-1"><a href="#现实生活-1" class="headerlink" title="现实生活"></a>现实生活</h3><ul><li><a href="https://www.bypass.cn/">抢火车票</a><blockquote><p> 可配置定时抢，是特殊时期的必备软件</p></blockquote></li></ul><h1 id="网上copy，暂未整理"><a href="#网上copy，暂未整理" class="headerlink" title="网上copy，暂未整理"></a>网上copy，暂未整理</h1><p>【模板库】</p><ol><li>演示星球：www.pop-ppt.com</li><li>微软 OfficePLUS：www.officeplus.cn【图片库】</li><li>免费商用 Unsplash：www.unsplash.com</li><li>免抠图透明素材 pngpix：www.pngpix.com</li><li>高清人、物PNG素材 MOOSE：https://igoutu.cn/photos【在线编辑】</li><li>人工智能绘画AutoDraw：www.autodraw.com</li><li>流体背景Fluid Simulation：paveldogreat.github.io/WebGL-Fluid-Simulation</li><li>纹理背景RUSSFUSS：russfuss.com</li><li>液态渐变星球 Nebula Artefact：https://alteredqualia.com/xg/examples/nebula_artefact.html</li><li>抽象背景Bg-Painter：bg-painter.com</li><li>渐变色 Mesh Gradient：meshgradient.com</li><li>在线作图（流程图、架构图、思维导图等）ProcessOn：www.processon.com</li><li>镝数图表：dycharts.com</li><li>花火数图（数据短视频）：hanabi.cn</li><li>在线编辑图片：iloveimg.com/zh-cn</li><li>免费在线抠图：fococlipping.com</li><li>免费样机生成器 Free Mockup Generator：mockups.pixeltrue.com18.在线文本格式转换 ACONVERT：aconvert.come</li></ol>]]></content>
      
      
      <categories>
          
          <category> 资源共享 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 资源共享 </tag>
            
            <tag> 不定期更新 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>图床测试</title>
      <link href="/posts/f2eb.html"/>
      <url>/posts/f2eb.html</url>
      
        <content type="html"><![CDATA[<h1 id="图床测试"><a href="#图床测试" class="headerlink" title="图床测试"></a>图床测试</h1><p><img src="https://notes.sjtu.edu.cn/uploads/upload_572a421050d5af848e688fc45cc1a314.png"></p><span id="more"></span><p><img src="https://notes.sjtu.edu.cn/uploads/upload_458393b775c56a99befb35f40b4a55d6.png"><img src="https://notes.sjtu.edu.cn/uploads/upload_7721f113d4edf88a5f967dbc8b4006f4.png"><img src="https://notes.sjtu.edu.cn/uploads/upload_b9b83640380d087e75f74fbe9c883e26.png"></p>]]></content>
      
      
      <categories>
          
          <category> 博客测试 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 博客测试 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>darknet 训练 yolov4-tiny模型</title>
      <link href="/posts/a6dc.html"/>
      <url>/posts/a6dc.html</url>
      
        <content type="html"><![CDATA[<h1 id="darknet-训练-yolov4-tiny模型"><a href="#darknet-训练-yolov4-tiny模型" class="headerlink" title="darknet 训练 yolov4-tiny模型"></a>darknet 训练 yolov4-tiny模型</h1><h2 id="为什么是-yolov4-tiny-模型："><a href="#为什么是-yolov4-tiny-模型：" class="headerlink" title="为什么是 yolov4-tiny 模型："></a>为什么是 yolov4-tiny 模型：</h2><p>相比官网教程实例采用的 yolov4 和 yolov3， yolov4-tiny 更加小巧，适合机载电脑使用。</p><span id="more"></span><h2 id="炼丹原料准备："><a href="#炼丹原料准备：" class="headerlink" title="炼丹原料准备："></a>炼丹原料准备：</h2><p>当代的模型训练和神秘东方帝国古老时候的炼丹技术有着高度类似性，所以又被称为“炼丹”，笑。</p><p>首先建议拍摄相应的照片素材（&gt;=500)，要求是尽量体现样本的多样性，这关系到最终模型的准确度，你也不想你的丹药废掉吧。</p><p>然后，你可以参考 <a href="https://github.com/heartexlabs/labelImg">label</a>，配置好标定软件。这里笔者更加推崇 Windows + Anaconda ，其中的 anaconda 是 windows 平台的 python 集成包，对于 python 相关的环境配置有很大的好处（你可以自行百度）。</p><p>关于后续的操作，你可以参考官网的 demo 视频，总之就是四步：1. 选择图片素材的文件夹目录 2. 选择图片标定的类别 3. 在图片上标定方框 4.保存！！！ </p><h2 id="上文火！（三体梗）总之就是开始炼丹了"><a href="#上文火！（三体梗）总之就是开始炼丹了" class="headerlink" title="上文火！（三体梗）总之就是开始炼丹了"></a>上文火！（三体梗）总之就是开始炼丹了</h2><p>你可以查看 github 这个部分 <a href="https://github.com/AlexeyAB/darknet#how-to-train-tiny-yolo-to-detect-your-custom-objects">训练</a> 以及它的上一个部分。大体上是如下几个步骤：</p><ul><li>下载预权重文件，后缀是类似 <code>.conv</code>，可以放在 darknet 主目录</li><li>修改 <code>.cfg</code> 文件，在 darknet/cfg 将其他文件内容修改（这部分需要严格参考官网文档）</li><li>在 darknet/data 内创建 <code>.name</code> <code>.data</code>文件</li><li>在 darknet/data 内创建文件夹，拷入图片素材和对应 txt 文件</li><li>创建 <code>train.txt</code>，内部写入所有图片素材的目录（建议用 excel 或 python 制作）</li></ul><p>最终，进入命令行输入官网上要求的代码，当命令行开始“翻滚”起来时，恭喜，你也是一名炼丹师了。</p><h2 id="备注"><a href="#备注" class="headerlink" title="备注"></a>备注</h2><p>本文档写得简略，建议仔细参考官方文档，同时也可以看看  <a href="https://zhuanlan.zhihu.com/p/494058726">比较好的教程</a>（有几处细节与官方不同，记得注意）。</p>]]></content>
      
      
      <categories>
          
          <category> 深度学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 深度学习 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
